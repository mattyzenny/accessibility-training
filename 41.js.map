{"version":3,"sources":["/Users/mattyZ/Desktop/Projects/forked-cel-library/dist-stencil/esm/cel-rich-text-toolbar.entry.js"],"names":["MapShim","Map","getIndex","arr","key","result","some","entry","index","class_1","this","__entries__","Object","defineProperty","prototype","get","length","enumerable","configurable","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","_i","_a","call","isBrowser","window","document","global$1","global","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","_b","propertyName","getInstance","instance_","defineConfigurable","target","props","keys","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","x","y","width","height","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","bbox","getSVGContentRect","clientWidth","clientHeight","getComputedStyle","paddings","positions_1","getPaddings","horizPad","left","right","vertPad","top","bottom","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","getHTMLElementContentRect","broadcastRect","ResizeObserverEntry","rectInit","Constr","contentRect","DOMRectReadOnly","create","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","_this","observation","map","WeakMap","ResizeObserver","method","apply","CelRichTextToolbar","hostRef","toolbarItemList","undefined","buttonPadding","regularViewPadding","bold","italic","underline","bullet","ordered","undo","redo","toolbarSelectedText","celRteEditorStore","celRteToolbarStore","celIconBaseUrl","toolbarAriaLabel","enableMathEditor","eventObj","detail","toolType","labelMessage","pressed","event","includes","code","handleKeyDown","cel_rich_text_toolbar_icon_button","el","itemList","item","math","observeToolBarWidth","toolbarElement","querySelector","resizeObserver","handleResize","offsetWidth","mobileViewPadding","_c","_d","allFocusableElements","Array","from","toolbarContainer","querySelectorAll","currentIndex","nextIndex","previousIndex","nextControl","preventDefault","shadowRoot","focus","previousControl","class","role","ref","itemGroup","groupIndex","groupType","iconType","iconIndex","style"],"mappings":"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","file":"41.js","sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-9a8c46b4.js';\nimport { t as transformTagName } from './utils-194224bf.js';\nimport { i as iconProps, t as toolbarItemLabel, r as rteBasicToolbar } from './cel-rich-text.interface-83978736.js';\nimport { d as ARROW_UP, c as ARROW_LEFT, e as ARROW_DOWN, A as ARROW_RIGHT } from './constants-a06dfd18.js';\n\n/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            this.__entries__ = [];\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"size\", {\r\n            /**\r\n             * @returns {boolean}\r\n             */\r\n            get: function () {\r\n                return this.__entries__.length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        class_1.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n            return entry && entry[1];\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            }\r\n            else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.forEach = function (callback, ctx) {\r\n            if (ctx === void 0) { ctx = null; }\r\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n        return class_1;\r\n    }());\r\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof global !== 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\n\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nfunction throttle (callback, delay) {\r\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n            callback();\r\n        }\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        }\r\n        else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n        lastCallTime = timeStamp;\r\n    }\r\n    return proxy;\r\n}\n\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\r\n    function ResizeObserverController() {\r\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.connected_ = false;\r\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.mutationEventsAdded_ = false;\r\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */\r\n        this.mutationsObserver_ = null;\r\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */\r\n        this.observers_ = [];\r\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n    }\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.addObserver = function (observer) {\r\n        if (!~this.observers_.indexOf(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.connected_) {\r\n            this.connect_();\r\n        }\r\n    };\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.removeObserver = function (observer) {\r\n        var observers = this.observers_;\r\n        var index = observers.indexOf(observer);\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.connected_) {\r\n            this.disconnect_();\r\n        }\r\n    };\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.refresh = function () {\r\n        var changesDetected = this.updateObservers_();\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (changesDetected) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    ResizeObserverController.prototype.updateObservers_ = function () {\r\n        // Collect observers that have active observations.\r\n        var activeObservers = this.observers_.filter(function (observer) {\r\n            return observer.gatherActive(), observer.hasActive();\r\n        });\r\n        // Deliver notifications in a separate cycle in order to avoid any\r\n        // collisions between observers, e.g. when multiple instances of\r\n        // ResizeObserver are tracking the same element and the callback of one\r\n        // of them changes content dimensions of the observed target. Sometimes\r\n        // this may result in notifications being blocked for the rest of observers.\r\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n        return activeObservers.length > 0;\r\n    };\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.connect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.connected_) {\r\n            return;\r\n        }\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way it's possible to capture at least the\r\n        // final state of an element.\r\n        document.addEventListener('transitionend', this.onTransitionEnd_);\r\n        window.addEventListener('resize', this.refresh);\r\n        if (mutationObserverSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        else {\r\n            document.addEventListener('DOMSubtreeModified', this.refresh);\r\n            this.mutationEventsAdded_ = true;\r\n        }\r\n        this.connected_ = true;\r\n    };\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.disconnect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.connected_) {\r\n            return;\r\n        }\r\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n        window.removeEventListener('resize', this.refresh);\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n        if (this.mutationEventsAdded_) {\r\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n        }\r\n        this.mutationsObserver_ = null;\r\n        this.mutationEventsAdded_ = false;\r\n        this.connected_ = false;\r\n    };\r\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n        // Detect whether transition may affect dimensions of an element.\r\n        var isReflowProperty = transitionKeys.some(function (key) {\r\n            return !!~propertyName.indexOf(key);\r\n        });\r\n        if (isReflowProperty) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.getInstance = function () {\r\n        if (!this.instance_) {\r\n            this.instance_ = new ResizeObserverController();\r\n        }\r\n        return this.instance_;\r\n    };\r\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.instance_ = null;\r\n    return ResizeObserverController;\r\n}());\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n    return target;\r\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\n\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        positions[_i - 1] = arguments[_i];\r\n    }\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n        var position = positions_1[_i];\r\n        var value = styles['padding-' + position];\r\n        paddings[position] = toFloat(value);\r\n    }\r\n    return paddings;\r\n}\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width), height = toFloat(styles.height);\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n        typeof target.getBBox === 'function'); };\r\n})();\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n    return getHTMLElementContentRect(target);\r\n}\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(_a) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n    return rect;\r\n}\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    function ResizeObservation(target) {\r\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastWidth = 0;\r\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastHeight = 0;\r\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */\r\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n        this.target = target;\r\n    }\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObservation.prototype.isActive = function () {\r\n        var rect = getContentRect(this.target);\r\n        this.contentRect_ = rect;\r\n        return (rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight);\r\n    };\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    ResizeObservation.prototype.broadcastRect = function () {\r\n        var rect = this.contentRect_;\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n        return rect;\r\n    };\r\n    return ResizeObservation;\r\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    function ResizeObserverEntry(target, rectInit) {\r\n        var contentRect = createReadOnlyRect(rectInit);\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, { target: target, contentRect: contentRect });\r\n    }\r\n    return ResizeObserverEntry;\r\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */\r\n        this.activeObservations_ = [];\r\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */\r\n        this.observations_ = new MapShim();\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.observe = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is already being observed.\r\n        if (observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.set(target, new ResizeObservation(target));\r\n        this.controller_.addObserver(this);\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    };\r\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.unobserve = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is not being observed.\r\n        if (!observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.delete(target);\r\n        if (!observations.size) {\r\n            this.controller_.removeObserver(this);\r\n        }\r\n    };\r\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.disconnect = function () {\r\n        this.clearActive();\r\n        this.observations_.clear();\r\n        this.controller_.removeObserver(this);\r\n    };\r\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.gatherActive = function () {\r\n        var _this = this;\r\n        this.clearActive();\r\n        this.observations_.forEach(function (observation) {\r\n            if (observation.isActive()) {\r\n                _this.activeObservations_.push(observation);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.broadcastActive = function () {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n        var ctx = this.callbackCtx_;\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        var entries = this.activeObservations_.map(function (observation) {\r\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n        });\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    };\r\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.clearActive = function () {\r\n        this.activeObservations_.splice(0);\r\n    };\r\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObserverSPI.prototype.hasActive = function () {\r\n        return this.activeObservations_.length > 0;\r\n    };\r\n    return ResizeObserverSPI;\r\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\r\n    function ResizeObserver(callback) {\r\n        if (!(this instanceof ResizeObserver)) {\r\n            throw new TypeError('Cannot call a class as a function.');\r\n        }\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        var controller = ResizeObserverController.getInstance();\r\n        var observer = new ResizeObserverSPI(callback, controller, this);\r\n        observers.set(this, observer);\r\n    }\r\n    return ResizeObserver;\r\n}());\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        var _a;\r\n        return (_a = observers.get(this))[method].apply(_a, arguments);\r\n    };\r\n});\n\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n    return ResizeObserver;\r\n})();\n\nconst celRichTextToolbarCss = \".lst-table-responsive-wrapper{width:var(--lst-table-responsive-wrapper-width, auto);height:var(--lst-table-responsive-wrapper-height, auto);overflow:var(--lst-table-responsive-wrapper-overflow, scroll)}.lst-table{border-collapse:var(--lst-table-border-collapse, collapse);border:var(--lst-table-border, none);background-color:var(--lst-table-background-color, #fff);font-family:var(--lst-table-font-family, \\\"OpenSans\\\");line-height:var(--lst-table-line-height, 20px);font-size:var(--lst-table-font-size, 0.875rem)}.lst-table.compact>thead>tr>th,.lst-table.compact>tbody>tr>td{padding-top:var(--lst-table-padding-top-compact, 8.5px);padding-bottom:var(--lst-table-padding-top-compact, 8.5px)}.lst-table>thead tr{border-top:var(--lst-table-header-row-border-top, none);background-color:var(--lst-table-header-background-color, #fff);line-height:var(--lst-table-header-row-line-height, 20px);padding:var(--lst-table-padding, 17px 8px)}.lst-table>thead>tr>th{border-top:var(--lst-table-th-border-top, none);border-left:var(--lst-table-th-border-left, none);border-right:var(--lst-table-th-border-right, none);border-bottom:var(--lst-table-th-border-bottom, 1px solid #555);font-family:var(--lst-table-th-font-family, \\\"OpenSans-Semibold\\\");font-size:var(--lst-table-th-font-size, 0.875rem);line-height:var(--lst-table-th-line-height, 20px);padding:var(--lst-table-th-padding, 8px 4px);min-width:var(--lst-table-th-min-width, 64px);max-width:var(--lst-table-th-max-width, none);text-align:var(--lst-table-th-text-align, left);vertical-align:var(--lst-table-th-vertical-align, middle);white-space:nowrap}.lst-table>thead>tr>th>.lst-table-header-icon{vertical-align:var(--lst-table-header-icon-vertical-align, middle);margin-bottom:var(--lst-table-header-icon-margin-bottom, 1px 0)}.lst-table>thead>tr>th.align-center{text-align:center}.lst-table>thead>tr>th.interactive:hover{background-color:var(--lst-table-th-interactive-hover-bg-color, #e5f0f9);border-radius:var(--interactive-hover-th-border-radius, 4px 4px 0 0)}.lst-table>thead>tr>th.interactive:hover:has(.lst-table-select){border-radius:var(--interactive-hover-select-th-border-radius, 4px 0 0 0);--primary-select-background-color:#e5f0f9;--primary-styling-label-color:#2150a3;--select-caret-down-color-base:#2150a3}.lst-table tbody tr{border-top:var(--lst-table-tr-border-top, none);border-left:var(--lst-table-tr-border-left, none);border-right:var(--lst-table-tr-border-right, none);border-bottom:var(--lst-table-tr-border-bottom, 1px solid #d8d8d8);background-color:var(--lst-table-body-background-color, #fff)}.lst-table tbody tr:hover{background-color:var(--lst-tr-hover-bg-color, #e5f0f9)}.lst-table tbody tr>td{font-size:var(--lst-table-td-font-size, 0.875rem);border-bottom:var(--lst-table-td-border-bottom, none);border-left:var(--lst-table-td-border-left, none);border-right:var(--lst-table-td-border-right, none);padding:var(--lst-table-padding, 17px 8px)}.lst-table tbody tr>td.align-center{text-align:center}.lst-table tbody tr>td.align-left{padding-left:var(--lst-table-td-align-left-padding, none);text-align:left}.lst-table .lst-table-select{margin-right:4px;--single-select-label-font-size:$text-size-small;--single-select-label-font-family:$secondary-font-medium;--label-margin-bottom-borderless:0}button:active:disabled{outline:none}:root{--primary:#006be0;--primaryShade:#2150a3;--errorNotificationOrange:#BD4500}.cel-visually-hidden{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.green{background-color:#35AA35;color:#000}.red{background-color:#CC333F;color:#fff}.yellow{background-color:#FFBA4A;color:#000}.blue{background-color:#584CE4;color:#fff}.white{background-color:#fff;color:#333}@media (hover: hover){.green.interactive:hover{background-color:#2A9A2A}.red.interactive:hover{background-color:#B42934}.yellow.interactive:hover{background-color:#E5A439}.blue.interactive:hover{background-color:#372CB4}}button,input,textarea{letter-spacing:unset;line-height:unset;word-spacing:unset;line-height:unset}.sc-quill-cel-rich-text-toolbar-container{background-color:#f3f3f3;border:1px solid #767676;border-width:1px 1px 0 1px;border-radius:var(--rich-text-editor-border-radius, 4px 4px 0 0);display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;min-height:40px;-ms-flex-align:center;align-items:center;padding:0 4px}\";\n\nconst CelRichTextToolbar = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.toolbarItemList = undefined;\n    this.buttonPadding = iconProps.regularViewPadding;\n    this.bold = false;\n    this.italic = false;\n    this.underline = false;\n    this.bullet = false;\n    this.ordered = false;\n    this.undo = false;\n    this.redo = false;\n    this.toolbarSelectedText = '';\n    this.celRteEditorStore = undefined;\n    this.celRteToolbarStore = undefined;\n    this.celIconBaseUrl = '';\n    this.toolbarAriaLabel = '';\n    this.enableMathEditor = undefined;\n  }\n  handleCelButtonOnClick(eventObj) {\n    const { detail: { toolType, labelMessage, pressed } } = eventObj;\n    const { bold, italic, underline, bullet, ordered } = toolbarItemLabel;\n    switch (toolType) {\n      case bold:\n      case italic:\n      case underline:\n      case bullet:\n      case ordered:\n        this.toolbarSelectedText = pressed ? `${labelMessage} toggle button pressed` : `${labelMessage} Toggle button not pressed`;\n        break;\n      // DO NOTHING      \n    }\n  }\n  handleArrowKeySelection(event) {\n    const arrowConstants = [ARROW_RIGHT, ARROW_LEFT, ARROW_DOWN, ARROW_UP];\n    if (!arrowConstants.includes(event.code))\n      return;\n    this.handleKeyDown(event);\n  }\n  connectedCallback() {\n    this.cel_rich_text_toolbar_icon_button = transformTagName('cel-rich-text-toolbar-icon', 'cel-rich-text-toolbar', this.el);\n  }\n  componentWillLoad() {\n    const itemList = [];\n    rteBasicToolbar.forEach((item) => {\n      if (this.enableMathEditor || !item.math) {\n        itemList.push(item);\n      }\n    });\n    this.toolbarItemList = itemList;\n  }\n  componentDidLoad() {\n    this.observeToolBarWidth();\n  }\n  observeToolBarWidth() {\n    this.toolbarElement = this.el.querySelector('.sc-quill-cel-rich-text-toolbar-container');\n    this.resizeObserver = new index(this.handleResize.bind(this));\n    this.resizeObserver.observe(this.toolbarElement);\n  }\n  handleResize() {\n    const rteWidth = this.toolbarElement.offsetWidth;\n    if (rteWidth <= 320) {\n      this.buttonPadding = iconProps.mobileViewPadding;\n    }\n    else {\n      this.buttonPadding = iconProps.regularViewPadding;\n    }\n  }\n  /*\n  * Handles arrow keys being pressed in the toolbar to shift focus between controls after tabbing into toolbar\n  */\n  handleKeyDown(event) {\n    var _a, _b, _c, _d;\n    const allFocusableElements = Array.from(this.toolbarContainer.querySelectorAll('.sc-quill-cel-rich-text-toolbar-button'));\n    const currentIndex = allFocusableElements.indexOf(event.target);\n    const nextIndex = (currentIndex + 1) % allFocusableElements.length;\n    const previousIndex = (currentIndex - 1 + allFocusableElements.length) % allFocusableElements.length;\n    switch (event.key) {\n      case ARROW_RIGHT:\n      case ARROW_DOWN:\n        const nextControl = allFocusableElements[nextIndex];\n        event.preventDefault();\n        (_b = (_a = nextControl === null || nextControl === void 0 ? void 0 : nextControl.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('button')) === null || _b === void 0 ? void 0 : _b.focus();\n        break;\n      case ARROW_LEFT:\n      case ARROW_UP:\n        const previousControl = allFocusableElements[previousIndex];\n        event.preventDefault();\n        (_d = (_c = previousControl === null || previousControl === void 0 ? void 0 : previousControl.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector('button')) === null || _d === void 0 ? void 0 : _d.focus();\n        break;\n      //DO NOTHING\n    }\n  }\n  render() {\n    return (h(Host, { \"data-cel-version\": '9.0.2' }, h(\"div\", { class: \"sc-quill-cel-rich-text-toolbar-container\", role: \"toolbar\", \"aria-orientation\": \"horizontal\" }, h(\"div\", { class: \"cel-visually-hidden\", role: \"alert\" }, this.toolbarSelectedText), h(\"div\", { class: \"sc-quill-cel-rich-text-inner-container\", ref: (el) => (this.toolbarContainer = el) }, this.toolbarItemList.map((itemGroup, groupIndex) => Object.keys(itemGroup).map((groupType) => (itemGroup[groupType].map((iconType, iconIndex) => (h(this.cel_rich_text_toolbar_icon_button, { celRteEditorStore: this.celRteEditorStore, celRteToolbarStore: this.celRteToolbarStore, \"data-rte-icon-group-type\": groupType, \"data-rte-icon-type\": iconType, \"data-cel-icon-src\": this.celIconBaseUrl, \"data-cel-icon-padding\": this.buttonPadding, \"data-add-icon-group-separator\": ((this.toolbarItemList.length !== (groupIndex + 1)) && (itemGroup[groupType].length === (iconIndex + 1))) ? true : false }))))))))));\n  }\n  get el() { return getElement(this); }\n};\nCelRichTextToolbar.style = celRichTextToolbarCss;\n\nexport { CelRichTextToolbar as cel_rich_text_toolbar };\n"],"sourceRoot":"webpack:///"}