{"version":3,"sources":["/Users/mattyZ/Desktop/Projects/forked-cel-library/dist-stencil/esm/cel-icon.entry.js"],"names":["CelIcon","hostRef","this","inheritedAttributes","hasAriaHidden","el","hasAttribute","getAttribute","svgContent","undefined","color","PRIMARY","tooltipLabel","size","MEDIUM","lazy","iconAriaLabel","name","src","pulse","spin","dialogCloseIconRole","attributes","attributeObject","forEach","attr","removeAttribute","inheritAttributes","waitUntilVisible","loadIcon","io","disconnect","rootMargin","cb","window","IntersectionObserver","data","isIntersecting","observe","URL","_a","isUrl","iconSrc","response","fetch","ok","text","console","error","statusText","replace","role","class","title","innerHTML","style"],"mappings":"8FAAA,gGAeA,MAgBMA,EAAU,MACd,YAAYC,GACV,YAAiBC,KAAMD,GACvBC,KAAKC,oBAAsB,GAC3BD,KAAKE,cAAgB,KACnB,MAAM,GAAEC,GAAOH,KACf,OAAQG,EAAGC,aAAa,gBACa,SAAnCD,EAAGE,aAAa,gBAEpBL,KAAKM,gBAAaC,EAClBP,KAAKQ,MAAQ,IAAcC,QAC3BT,KAAKU,aAAe,GACpBV,KAAKW,KAAO,IAAaC,OACzBZ,KAAKa,MAAO,EACZb,KAAKc,mBAAgBP,EACrBP,KAAKe,UAAOR,EACZP,KAAKgB,SAAMT,EACXP,KAAKiB,WAAQV,EACbP,KAAKkB,UAAOX,EACZP,KAAKmB,oBAAsB,MAE7B,oBACEnB,KAAKC,oBAtCiB,EAACE,EAAIiB,EAAa,MAC1C,MAAMC,EAAkB,GAUxB,OATAD,EAAWE,QAASC,IACdpB,EAAGC,aAAamB,KAEJ,OADApB,EAAGE,aAAakB,KAE5BF,EAAgBE,GAAQpB,EAAGE,aAAakB,IAE1CpB,EAAGqB,gBAAgBD,MAGhBF,GA2BsBI,CAAkBzB,KAAKG,GAAI,CAAC,eAEzD,oBAIEH,KAAK0B,iBAAiB1B,KAAKG,GAAI,OAAQ,KACrCH,KAAK2B,aAGT,uBACM3B,KAAK4B,KACP5B,KAAK4B,GAAGC,aACR7B,KAAK4B,QAAKrB,GAGd,iBAAiBJ,EAAI2B,EAAYC,GAC/B,GAAI/B,KAAKa,MACW,oBAAXmB,QACPA,OAAOC,qBAAsB,CAC7B,MAAML,EAAM5B,KAAK4B,GAAK,IAAII,OAAOC,qBAAsBC,IACjDA,EAAK,GAAGC,iBACVP,EAAGC,aACH7B,KAAK4B,QAAKrB,EACVwB,MAED,CAAED,eACLF,EAAGQ,QAAQjC,QAKX4B,IAGJ,MAAMhB,GACJ,IAEE,OADA,IAAIsB,IAAItB,IACD,EAET,MAAOuB,GACL,OAAO,GAGX,iBACE,MAAMC,EAAQvC,KAAKuC,MAAMvC,KAAKe,MACxByB,EAAUxC,KAAKgB,IACjBhB,KAAKgB,IACLuB,EACEvC,KAAKe,KACL,+CAA+Cf,KAAKe,WAC1D,IACE,MAAM0B,QAAiBC,MAAMF,GACzBC,EAASE,GACX3C,KAAKM,iBAAmBmC,EAASG,OAGjCC,QAAQC,MAAM,wBAAwBL,EAASM,cAGnD,MAAOD,GACLD,QAAQC,MAAM,uBAAuBA,MAMlC9C,KAAKc,eAAiBd,KAAKe,OAC9Bf,KAAKc,cAAgBd,KAAKe,KAAKiC,QAAQ,MAAO,MAGlD,SACE,MAAM,cAAElC,EAAa,oBAAEb,GAAwBD,KAQ/C,OAAQ,WAAD,CAAG,IAAM,CAAE,mBAAoB,QAAS,kBAAgCO,IAAlBO,GAAgCd,KAAKE,gBAE5F,KADAY,EACMmC,KAAMjD,KAAKmB,oBAAqB+B,MAAO,IAC5C,YAAmBlD,KAAKQ,OAC3B,cAAiBR,KAAKiB,MACtB,aAAgBjB,KAAKkB,KACrB,CAAC,QAAQlB,KAAKW,UAAWX,KAAKW,SAC1BV,GAAuBD,KAAKM,WAAc,WAAD,CAAG,MAAO,CAAE6C,MAAOnD,KAAKU,aAAeV,KAAKU,aAAe,KAAMwC,MAAO,aAAcE,UAAWpD,KAAKM,aAAkB,WAAD,CAAG,MAAO,CAAE4C,MAAO,gBAE7L,SAAW,OAAO,YAAWlD,MAC7B,sBAAwB,MAAO,CAC7B,KAAQ,CAAC,YACT,IAAO,CAAC,eAGZF,EAAQuD,MAvHW","file":"24.js","sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-9a8c46b4.js';\nimport { e as createColorClasses } from './utils-194224bf.js';\nimport { C as CelIconColors, a as CelIconSizes } from './cel-icon-constants-33baae7b.js';\nimport './constants-a06dfd18.js';\n\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nconst inheritAttributes = (el, attributes = []) => {\n  const attributeObject = {};\n  attributes.forEach((attr) => {\n    if (el.hasAttribute(attr)) {\n      const value = el.getAttribute(attr);\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n      el.removeAttribute(attr);\n    }\n  });\n  return attributeObject;\n};\n\nconst celIconCss = \".lst-table-responsive-wrapper{width:var(--lst-table-responsive-wrapper-width, auto);height:var(--lst-table-responsive-wrapper-height, auto);overflow:var(--lst-table-responsive-wrapper-overflow, scroll)}.lst-table{border-collapse:var(--lst-table-border-collapse, collapse);border:var(--lst-table-border, none);background-color:var(--lst-table-background-color, #fff);font-family:var(--lst-table-font-family, \\\"OpenSans\\\");line-height:var(--lst-table-line-height, 20px);font-size:var(--lst-table-font-size, 0.875rem)}.lst-table.compact>thead>tr>th,.lst-table.compact>tbody>tr>td{padding-top:var(--lst-table-padding-top-compact, 8.5px);padding-bottom:var(--lst-table-padding-top-compact, 8.5px)}.lst-table>thead tr{border-top:var(--lst-table-header-row-border-top, none);background-color:var(--lst-table-header-background-color, #fff);line-height:var(--lst-table-header-row-line-height, 20px);padding:var(--lst-table-padding, 17px 8px)}.lst-table>thead>tr>th{border-top:var(--lst-table-th-border-top, none);border-left:var(--lst-table-th-border-left, none);border-right:var(--lst-table-th-border-right, none);border-bottom:var(--lst-table-th-border-bottom, 1px solid #555);font-family:var(--lst-table-th-font-family, \\\"OpenSans-Semibold\\\");font-size:var(--lst-table-th-font-size, 0.875rem);line-height:var(--lst-table-th-line-height, 20px);padding:var(--lst-table-th-padding, 8px 4px);min-width:var(--lst-table-th-min-width, 64px);max-width:var(--lst-table-th-max-width, none);text-align:var(--lst-table-th-text-align, left);vertical-align:var(--lst-table-th-vertical-align, middle);white-space:nowrap}.lst-table>thead>tr>th>.lst-table-header-icon{vertical-align:var(--lst-table-header-icon-vertical-align, middle);margin-bottom:var(--lst-table-header-icon-margin-bottom, 1px 0)}.lst-table>thead>tr>th.align-center{text-align:center}.lst-table>thead>tr>th.interactive:hover{background-color:var(--lst-table-th-interactive-hover-bg-color, #e5f0f9);border-radius:var(--interactive-hover-th-border-radius, 4px 4px 0 0)}.lst-table>thead>tr>th.interactive:hover:has(.lst-table-select){border-radius:var(--interactive-hover-select-th-border-radius, 4px 0 0 0);--primary-select-background-color:#e5f0f9;--primary-styling-label-color:#2150a3;--select-caret-down-color-base:#2150a3}.lst-table tbody tr{border-top:var(--lst-table-tr-border-top, none);border-left:var(--lst-table-tr-border-left, none);border-right:var(--lst-table-tr-border-right, none);border-bottom:var(--lst-table-tr-border-bottom, 1px solid #d8d8d8);background-color:var(--lst-table-body-background-color, #fff)}.lst-table tbody tr:hover{background-color:var(--lst-tr-hover-bg-color, #e5f0f9)}.lst-table tbody tr>td{font-size:var(--lst-table-td-font-size, 0.875rem);border-bottom:var(--lst-table-td-border-bottom, none);border-left:var(--lst-table-td-border-left, none);border-right:var(--lst-table-td-border-right, none);padding:var(--lst-table-padding, 17px 8px)}.lst-table tbody tr>td.align-center{text-align:center}.lst-table tbody tr>td.align-left{padding-left:var(--lst-table-td-align-left-padding, none);text-align:left}.lst-table .lst-table-select{margin-right:4px;--single-select-label-font-size:$text-size-small;--single-select-label-font-family:$secondary-font-medium;--label-margin-bottom-borderless:0}button:active:disabled{outline:none}:root{--primary:#006be0;--primaryShade:#2150a3;--errorNotificationOrange:#BD4500}.cel-visually-hidden{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.green{background-color:#35AA35;color:#000}.red{background-color:#CC333F;color:#fff}.yellow{background-color:#FFBA4A;color:#000}.blue{background-color:#584CE4;color:#fff}.white{background-color:#fff;color:#333}@media (hover: hover){.green.interactive:hover{background-color:#2A9A2A}.red.interactive:hover{background-color:#B42934}.yellow.interactive:hover{background-color:#E5A439}.blue.interactive:hover{background-color:#372CB4}}button,input,textarea{letter-spacing:unset;line-height:unset;word-spacing:unset;line-height:unset}:host{display:inline-block;width:var(--cel-icon-width, 1em);height:var(--cel-icon-height, 1em);contain:var(--cel-icon-contain, strict);fill:currentColor;-webkit-box-sizing:content-box !important;box-sizing:content-box !important}:host .cel-icon{stroke:currentColor}.cel-icon-fill-none{fill:none}.cel-icon-stroke-width{stroke-width:var(--cel-icon-stroke-width, 0)}.icon-inner,.cel-icon,svg{display:block;height:100%;width:100%}.cel-icon{-webkit-animation:var(--cel-icon-animation, none) !important;animation:var(--cel-icon-animation, none) !important}:host(.icon-custom){font-size:var(--cel-icon-custom-size, 24px) !important}:host(.icon-xxsmall){font-size:8px !important}:host(.icon-xsmall){font-size:12px !important}:host(.icon-small){font-size:14px !important}:host(.icon-regular){font-size:16px !important}:host(.icon-medium){font-size:18px !important}:host(.icon-mlarge){font-size:24px !important}:host(.icon-large){font-size:32px !important}:host(.icon-xlarge){font-size:50px !important}:host(.icon-xxlarge){font-size:68px !important}:host(.icon-xxxlarge){font-size:138px !important}:host(.cel-color){color:var(--cel-color-base) !important}:host(.cel-color-primary){--cel-color-base:var(--cel-color-primary, #006be0)}:host(.cel-color-width){width:var(--cel-color-width, 18px)}:host(.cel-color-primary-shade){--cel-color-base:var(--cel-color-primary-shade, #2150a3)}:host(.cel-color-black){--cel-color-base:var(--cel-color-black, #000)}:host(.cel-color-white){--cel-color-base:var(--cel-color-white, #fff)}:host(.cel-color-error){--cel-color-base:var(--cel-color-error, #cc333f)}:host(.cel-color-error-shade){--cel-color-base:var(--cel-color-error-shade, #a71622)}:host(.cel-color-notification){--cel-color-base:var(--cel-color-notification, #C6720C)}:host(.cel-color-confirm){--cel-color-base:var(--cel-color-confirm, #2A7D14)}:host(.cel-color-feedback-green){--cel-color-base:var(--cel-color-confirm, #008A00)}:host(.cel-color-plum){--cel-color-base:var(--cel-color-plum, #902364)}:host(.cel-color-gray-darker){--cel-color-base:var(--cel-color-gray-darker, #333)}:host(.cel-color-disabled){--cel-color-base:var(--cel-color-disabled, #cdcdcd)}:host(.cel-color-gray-dusty){--cel-color-base:var(--cel-color-gray-dusty, #939393)}:host(.cel-color-gray-light){--cel-color-base:var(--cel-color-gray-light, #cdcdcd)}:host(.cel-color-gray-lighter){--cel-color-base:var(--cel-color-gray-lighter, #e2e2e2)}:host(.cel-color-gray){--cel-color-base:var(--cel-color-gray, #767676)}:host(.cel-color-notification){--cel-color-base:var(--cel-color-notification, #C6720C)}:host(.cel-pulse){--cel-icon-animation:spin 0.5s infinite steps(11)}:host(.cel-spin){--cel-icon-animation:spin 1s 0s infinite linear}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}\";\n\nconst CelIcon = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.inheritedAttributes = {};\n    this.hasAriaHidden = () => {\n      const { el } = this;\n      return (el.hasAttribute('aria-hidden') &&\n        el.getAttribute('aria-hidden') === 'true');\n    };\n    this.svgContent = undefined;\n    this.color = CelIconColors.PRIMARY;\n    this.tooltipLabel = '';\n    this.size = CelIconSizes.MEDIUM;\n    this.lazy = false;\n    this.iconAriaLabel = undefined;\n    this.name = undefined;\n    this.src = undefined;\n    this.pulse = undefined;\n    this.spin = undefined;\n    this.dialogCloseIconRole = 'img';\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n  connectedCallback() {\n    // purposely do not return the promise here because loading\n    // the svg file should not hold up loading the app\n    // only load the svg if it's visible\n    this.waitUntilVisible(this.el, '50px', () => {\n      this.loadIcon();\n    });\n  }\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  waitUntilVisible(el, rootMargin, cb) {\n    if (this.lazy &&\n      typeof window !== 'undefined' &&\n      window.IntersectionObserver) {\n      const io = (this.io = new window.IntersectionObserver((data) => {\n        if (data[0].isIntersecting) {\n          io.disconnect();\n          this.io = undefined;\n          cb();\n        }\n      }, { rootMargin }));\n      io.observe(el);\n    }\n    else {\n      // browser doesn't support IntersectionObserver\n      // so just fallback to always show it\n      cb();\n    }\n  }\n  isUrl(name) {\n    try {\n      new URL(name);\n      return true;\n    }\n    catch (_a) {\n      return false;\n    }\n  }\n  async loadIcon() {\n    const isUrl = this.isUrl(this.name);\n    const iconSrc = this.src\n      ? this.src\n      : isUrl\n        ? this.name\n        : `https://lst-assets.savvasrealize.com/assets/${this.name}.svg`;\n    try {\n      const response = await fetch(iconSrc);\n      if (response.ok) {\n        this.svgContent = await response.text();\n      }\n      else {\n        console.error(`Failed to fetch SVG: ${response.statusText}`);\n      }\n    }\n    catch (error) {\n      console.error(`Error fetching SVG: ${error}`);\n    }\n    /**\n     * Come up with a default label\n     * in case user does not provide their own.\n     */\n    if (!this.iconAriaLabel && this.name) {\n      this.iconAriaLabel = this.name.replace(/\\-/g, ' ');\n    }\n  }\n  render() {\n    const { iconAriaLabel, inheritedAttributes } = this;\n    /**\n     * Only set the aria-label if a) we have generated\n     * one for the icon and if aria-hidden is not set to 'true'.\n     * If developer wants to set their own aria-label, then\n     * inheritedAttributes down below will override whatever\n     * default label we have set.\n     */\n    return (h(Host, { \"data-cel-version\": '9.0.2', \"aria-label\": iconAriaLabel !== undefined && !this.hasAriaHidden()\n        ? iconAriaLabel\n        : null, role: this.dialogCloseIconRole, class: {\n        ...createColorClasses(this.color),\n        ['cel-pulse']: !!this.pulse,\n        ['cel-spin']: !!this.spin,\n        [`icon-${this.size}`]: !!this.size,\n      }, ...inheritedAttributes }, this.svgContent ? (h(\"div\", { title: this.tooltipLabel ? this.tooltipLabel : null, class: 'icon-inner', innerHTML: this.svgContent })) : (h(\"div\", { class: 'icon-inner' }))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"name\": [\"loadIcon\"],\n    \"src\": [\"loadIcon\"]\n  }; }\n};\nCelIcon.style = celIconCss;\n\nexport { CelIcon as cel_icon };\n"],"sourceRoot":"webpack:///"}