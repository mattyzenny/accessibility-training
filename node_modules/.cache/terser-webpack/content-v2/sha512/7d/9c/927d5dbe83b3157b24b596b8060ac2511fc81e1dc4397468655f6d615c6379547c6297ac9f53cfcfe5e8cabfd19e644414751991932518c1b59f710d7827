{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{QxTW:function(t,e,i){\"use strict\";i.r(e),i.d(e,\"cel_multi_checkbox\",function(){return s});var o=i(\"luJw\"),l=i(\"87XR\"),a=i(\"PREZ\");const s=class{constructor(t){Object(o.i)(this,t),this.celChange=Object(o.d)(this,\"celMultiCheckboxChange\",7),this.filteredListLengthEvent=Object(o.d)(this,\"celMultiCheckboxFilteredListLength\",7),this.loadMoreButtonClick=Object(o.d)(this,\"celMultiCheckboxLoadMoreButtonClick\",7),this.displayCountChange=Object(o.d)(this,\"celMultiCheckboxDisplayCountChange\",7),this.filterDisplayCountChange=Object(o.d)(this,\"celMultiCheckboxFilterDisplayCountChange\",7),this.filteredList=[],this.displayCount=void 0,this.nextLoadedItemIndex=null,this.filter=\"\",this.itemList=[],this.hideAll=void 0,this.multiCheckboxAriaLabel=\"multi checkbox\",this.emptyResultLabel=\"\",this.maxCheckboxEnabled=void 0,this.showLoader=!1,this.enableColumns=!1,this.displayCountConfig=null,this.loadMoreConfig=null,this.selectAllConfig={selectAllLabel:\"Select All\",selectAllFilterLabel:\"Select All Visible\"},this.initialItemCount=null}connectedCallback(){this.cel_checkbox_item=Object(l.k)(\"cel-checkbox-item\",\"cel-multi-checkbox\",this.el),this.cel_icon_label=Object(l.k)(\"cel-icon-label\",\"cel-multi-checkbox\",this.el)}handleItemListChange(){this.celChange.emit(this.itemList)}handleFilterChange(){var t,e;this.loadMoreConfig&&!(null===(e=null===(t=this.el)||void 0===t?void 0:t.shadowRoot)||void 0===e?void 0:e.activeElement)&&null!=this.nextLoadedItemIndex&&(this.nextLoadedItemIndex=null),this.displayCountConfig&&(!this.filter||this.filteredList.length>=this.displayCount?this.displayCountConfig.itemCount!==this.displayCount&&this.updateDisplayCountConfigOnFilter(this.displayCount):this.displayCountConfig.itemCount!==this.filteredList.length&&this.updateDisplayCountConfigOnFilter(this.filteredList.length)),this.filteredList=this.itemList.filter(t=>t.label.toLowerCase().includes(this.filter.toLowerCase()));const i=this.filteredList.filter(t=>t.checked).length,o=this.filteredList.filter(t=>t.disabled).length;this.headerCelCheckbox&&(this.headerCelCheckbox.shadowRoot.querySelector(\"input\").checked=!(i<this.filteredList.length-o),\"\"===this.filter&&(this.filteredList=[]),this.filteredListLengthEvent.emit(this.filteredList.length))}updateDisplayCountConfigOnFilter(t){this.updateDisplayCountConfig(t),this.displayCountChange.emit(this.displayCountConfig),this.filterDisplayCountChange.emit(this.displayCount)}componentDidLoad(){const t=this.scanList(this.itemList);if(this.headerCelCheckbox)switch(t){case 0:this.headerCelCheckbox.shadowRoot&&(this.headerCelCheckbox.shadowRoot.querySelector(\"input\").checked=!1);break;case this.itemList.length:this.headerCelCheckbox.shadowRoot.querySelector(\"input\").checked=!0}}handleMultiSelect(){this.deselectAll(),this.headerCelCheckbox&&(this.headerCelCheckbox.shadowRoot.querySelector(\"input\").checked=!1,this.itemList.every(t=>t.checked)&&this.itemList.map(t=>t.checked=!1))}handleHeaderCheckboxChange(t){\"header-checkbox\"==t.detail.checkboxType&&this.toggleAll(t)}handleCelCheckboxChange(t){const e=this.itemList.map(e=>t.detail.identifier===e.identifier?{...e,checked:t.detail.checked}:e);if(this.filter&&\"\"!==this.filter){const e=this.filteredList.map(e=>t.detail.identifier===e.identifier?{...e,checked:t.detail.checked}:e);this.filteredList=e}this.itemList=e}passClick(t){const e=t.target;e.className.includes(\"item-container\")&&e.firstChild.shadowRoot.querySelector(\"label\").click()}passMouseEnter(t){var e;const i=t.target;i.className.includes(\"item-container\")&&(null===(e=i.firstChild.shadowRoot.querySelector(\"label\"))||void 0===e||e.dispatchEvent(new MouseEvent(\"mouseenter\")))}passMouseLeave(t){const e=t.target;e.className.includes(\"item-container\")&&e.firstChild.shadowRoot.querySelector(\"label\").dispatchEvent(new MouseEvent(\"mouseleave\"))}scanList(t){let e=0;for(let i=0;i<t.length;i++)t[i].checked&&(e+=1);return e}toggleAll(t){t.detail.checked?this.selectAll():this.deselectAll()}selectAll(){const t=this.itemList.map(t=>t.label.toLowerCase().includes(this.filter.toLowerCase())&&!t.disabled?{...t,checked:!0}:t);this.itemList=t}deselectAll(){if(this.filter){const t=this.itemList.map(t=>t.label.toLowerCase().includes(this.filter.toLowerCase())&&!t.disabled?{...t,checked:!1}:t);this.itemList=t}else{const t=this.itemList.map(t=>t.disabled?t:{...t,checked:!1});this.itemList=t}}checkSearchResult(t,e){let i=!0;return t.forEach(t=>{e&&t.label.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())&&(i=!1)}),i}getDataLabel(){if(this.filter&&\"\"!==this.filter)return`${this.selectAllConfig.selectAllFilterLabel}`;if(this.selectAllConfig.showTotalItemCount){const t=Number.isInteger(this.selectAllConfig.totalItemCount)?this.selectAllConfig.totalItemCount:this.itemList.length;return`${this.selectAllConfig.selectAllLabel} ${t.toLocaleString()}`}return`${this.selectAllConfig.selectAllLabel}`}getSelectAllCheckboxState(t){if(0===t.length)return!1;const e=this.filter?[...this.filteredList]:[...this.itemList],i=e.some(t=>t.disabled),o=e.every(t=>t.checked);return this.syncFilteredState(),o||i&&e.every(t=>t.checked||t.disabled)}syncFilteredState(){this.filter&&this.handleFilterChange()}componentWillLoad(){var t,e;!this.initialItemCount&&this.displayCountConfig&&(this.initialItemCount=(null===(t=this.displayCountConfig)||void 0===t?void 0:t.itemCount)||(null===(e=this.loadMoreConfig)||void 0===e?void 0:e.increment)||0),this.initializeDisplayCount(),this.syncFilteredState()}handleShowLoaderChange(t,e){!t&&e&&(this.displayCountConfig||this.loadMoreConfig)&&(this.displayCountConfig&&this.updateDisplayCountConfig(this.initialItemCount),this.initializeDisplayCount(),this.displayCountConfig&&this.displayCountChange.emit(this.displayCountConfig))}handleDisplayCountConfigChange(){this.displayCountConfig&&this.displayCountConfig.itemCount!==this.displayCount&&!this.filter&&this.updateDisplayCountFromDisplayCountConfig()}updateDisplayCountFromDisplayCountConfig(){this.displayCount=this.displayCountConfig.itemCount<0||!this.displayCountConfig.itemCount?0:this.displayCountConfig.itemCount>this.itemList.length?this.itemList.length:this.displayCountConfig.itemCount,this.updateDisplayCountConfig(this.displayCount)}handleLoadMoreButtonClick(){this.loadMoreConfig.increment<=0||(this.nextLoadedItemIndex=this.filter?this.itemList.findIndex(t=>t.identifier===this.filteredList[this.displayCount].identifier):this.displayCount,this.displayCount=this.displayCount+this.loadMoreConfig.increment>this.itemList.length?this.itemList.length:this.displayCount+this.loadMoreConfig.increment,this.displayCountConfig&&(this.updateDisplayCountConfig(this.displayCount),this.displayCountChange.emit(this.displayCountConfig),this.filter&&this.filterDisplayCountChange.emit(this.displayCount)),this.loadMoreButtonClick.emit(this.displayCount))}updateDisplayCountConfig(t){var e;t!==(null===(e=this.displayCountConfig)||void 0===e?void 0:e.itemCount)&&(this.displayCountConfig={...this.displayCountConfig,itemCount:t})}initializeDisplayCount(){var t,e;Number.isInteger(null===(t=this.displayCountConfig)||void 0===t?void 0:t.itemCount)?this.updateDisplayCountFromDisplayCountConfig():this.displayCount=Number.isInteger(null===(e=this.loadMoreConfig)||void 0===e?void 0:e.increment)?this.loadMoreConfig.increment<0?0:this.loadMoreConfig.increment>this.itemList.length?this.itemList.length:this.loadMoreConfig.increment:this.itemList.length,this.displayCountConfig&&this.displayCountConfig.itemCount!==this.displayCount&&this.updateDisplayCountConfig(this.displayCount)}render(){var t;const e=this.checkSearchResult(this.itemList,this.filter);return Object(o.g)(o.a,{\"data-cel-version\":\"10.1.4\"},Object(o.g)(\"div\",{class:[\"multi-container\",this.enableColumns?\"multi-columns-container\":\"\"].join(\" \"),role:\"group\",\"aria-label\":this.multiCheckboxAriaLabel},this.hideAll?null:Object(o.g)(\"div\",{class:[\"header-container item-container border-bottom\",this.getSelectAllCheckboxState(this.itemList)?\"checked\":\"\"].join(\" \"),onMouseOver:t=>this.passMouseEnter(t),onMouseLeave:t=>this.passMouseLeave(t),onClick:t=>this.passClick(t)},Object(o.g)(this.cel_checkbox_item,{\"data-identifier\":\"cci-header-checkbox\",ref:t=>this.headerCelCheckbox=t,\"data-checkbox-type\":a.f,\"data-checked\":this.getSelectAllCheckboxState(this.itemList),class:\"header-checkbox\",\"data-label\":this.getDataLabel(),\"data-disabled\":this.showLoader,\"data-subtext\":this.displayCountConfig?`${this.displayCountConfig.displayingLabel} ${null===(t=this.displayCountConfig.itemCount)||void 0===t?void 0:t.toLocaleString()}`:null,\"data-subtext-position\":this.displayCountConfig?a.l.RIGHT:null,\"data-is-subtext-live-region\":!!this.displayCountConfig})),this.showLoader?null:Object(o.g)(\"div\",{class:\"item-list-wrapper\"},Object(o.g)(\"ul\",{class:[\"item-list-container\",this.enableColumns?\"columns-container\":\"\"].join(\" \")},this.itemList.map((t,i,l)=>this.filter&&e&&i+1===l.length?Object(o.g)(\"li\",null,this.emptyResultLabel):this.filter&&!t.label.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())||(this.displayCountConfig||this.loadMoreConfig)&&(i>=this.displayCount&&!this.filter||this.filter&&this.filteredList.findIndex(e=>e.identifier===t.identifier)>=this.displayCount)?void 0:Object(o.g)(\"li\",{class:[\"item-container\",t.checked?\"checked\":\"\"].join(\" \"),onClick:t=>this.passClick(t),onMouseOver:t=>this.passMouseEnter(t),onMouseLeave:t=>this.passMouseLeave(t)},Object(o.g)(this.cel_checkbox_item,{class:\"checkbox-item\",\"data-identifier\":t.identifier,\"data-label\":t.label,\"data-checked\":t.checked,\"data-disabled\":t.disabled,\"data-subtext\":t.subtext,\"data-focus-element\":this.loadMoreConfig&&i===this.nextLoadedItemIndex})))),this.loadMoreConfig&&(!this.filter&&this.itemList.length>this.displayCount||this.filter&&this.filteredList.length>this.displayCount)?Object(o.g)(this.cel_icon_label,{class:\"load-more-button\",\"data-label\":this.loadMoreConfig.loadMoreLabel}):null)))}get el(){return Object(o.f)(this)}static get watchers(){return{itemList:[\"handleItemListChange\"],filter:[\"handleFilterChange\"],showLoader:[\"handleShowLoaderChange\"],displayCountConfig:[\"handleDisplayCountConfigChange\"]}}};s.style='.lst-table-responsive-wrapper{width:var(--lst-table-responsive-wrapper-width, auto);height:var(--lst-table-responsive-wrapper-height, auto);overflow:var(--lst-table-responsive-wrapper-overflow, scroll)}.lst-table{border-collapse:var(--lst-table-border-collapse, collapse);border:var(--lst-table-border, none);background-color:var(--lst-table-background-color, #fff);font-family:var(--lst-table-font-family, \"OpenSans\");line-height:var(--lst-table-line-height, 20px);font-size:var(--lst-table-font-size, 0.875rem)}.lst-table.compact>thead>tr>th,.lst-table.compact>tbody>tr>td{padding-top:var(--lst-table-padding-top-compact, 8.5px);padding-bottom:var(--lst-table-padding-top-compact, 8.5px)}.lst-table>thead tr{border-top:var(--lst-table-header-row-border-top, none);background-color:var(--lst-table-header-background-color, #fff);line-height:var(--lst-table-header-row-line-height, 20px);padding:var(--lst-table-padding, 17px 8px)}.lst-table>thead>tr>th{border-top:var(--lst-table-th-border-top, none);border-left:var(--lst-table-th-border-left, none);border-right:var(--lst-table-th-border-right, none);border-bottom:var(--lst-table-th-border-bottom, 1px solid #555);font-family:var(--lst-table-th-font-family, \"OpenSans-Semibold\");font-size:var(--lst-table-th-font-size, 0.875rem);line-height:var(--lst-table-th-line-height, 20px);padding:var(--lst-table-th-padding, 8px 4px);min-width:var(--lst-table-th-min-width, 64px);max-width:var(--lst-table-th-max-width, none);text-align:var(--lst-table-th-text-align, left);vertical-align:var(--lst-table-th-vertical-align, middle);white-space:nowrap}.lst-table>thead>tr>th>.lst-table-header-icon{vertical-align:var(--lst-table-header-icon-vertical-align, middle);margin-bottom:var(--lst-table-header-icon-margin-bottom, 1px 0)}.lst-table>thead>tr>th.align-center{text-align:center}.lst-table>thead>tr>th.interactive:hover{background-color:var(--lst-table-th-interactive-hover-bg-color, #e5f0f9);border-radius:var(--interactive-hover-th-border-radius, 4px 4px 0 0)}.lst-table>thead>tr>th.interactive:hover:has(.lst-table-select){border-radius:var(--interactive-hover-select-th-border-radius, 4px 0 0 0);--primary-select-background-color:#e5f0f9;--primary-styling-label-color:#2150a3;--select-caret-down-color-base:#2150a3}.lst-table tbody tr{border-top:var(--lst-table-tr-border-top, none);border-left:var(--lst-table-tr-border-left, none);border-right:var(--lst-table-tr-border-right, none);border-bottom:var(--lst-table-tr-border-bottom, 1px solid #d8d8d8);background-color:var(--lst-table-body-background-color, #fff)}.lst-table tbody tr:hover{background-color:var(--lst-tr-hover-bg-color, #e5f0f9)}.lst-table tbody tr>td{font-size:var(--lst-table-td-font-size, 0.875rem);border-bottom:var(--lst-table-td-border-bottom, none);border-left:var(--lst-table-td-border-left, none);border-right:var(--lst-table-td-border-right, none);padding:var(--lst-table-padding, 17px 8px)}.lst-table tbody tr>td.align-center{text-align:center}.lst-table tbody tr>td.align-left{padding-left:var(--lst-table-td-align-left-padding, none);text-align:left}.lst-table .lst-table-select{margin-right:4px;--single-select-label-font-size:$text-size-small;--single-select-label-font-family:$secondary-font-medium;--label-margin-bottom-borderless:0}button:active:disabled{outline:none}:root{--primary:#006be0;--primaryShade:#2150a3;--errorNotificationOrange:#BD4500}.cel-visually-hidden{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.zero-height-status-container{height:0}.green{background-color:#35AA35;color:#000}.red{background-color:#CC333F;color:#fff}.yellow{background-color:#FFBA4A;color:#000}.blue{background-color:#584CE4;color:#fff}.white{background-color:#fff;color:#333}.primary-shade{background-color:#2150a3;color:#fff}@media (hover: hover){.green.interactive:hover{background-color:#2A9A2A}.red.interactive:hover{background-color:#B42934}.yellow.interactive:hover{background-color:#E5A439}.blue.interactive:hover{background-color:#372CB4}}button,input,textarea{letter-spacing:unset;line-height:unset;word-spacing:unset;line-height:unset}:host{display:inline-block}.checkbox-item{width:100%;--checkbox-label-maxWidth:var(--checkbox-item-maxWidth, 100%);--checkbox-item-line-clamp:var(--multi-checkbox-item-line-clamp, 2);--checkbox-subtext-color:var(--multi-checkbox-item-subtext-color, #333);--checkbox-item-subtext-disabled-color:var(--multi-checkbox-item-subtext-disabled-color, #939393)}.multi-container{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;border-radius:var(--multi-checkbox-container-border-radius, 2px);overflow:hidden;-webkit-box-shadow:var(--multi-checkbox-box-shadow, 0 3px 5px 0 rgba(0, 0, 0, 0.36));box-shadow:var(--multi-checkbox-box-shadow, 0 3px 5px 0 rgba(0, 0, 0, 0.36));min-width:var(--multi-checkbox-container-min-width, 240px);background-color:var(--multi-checkbox-container-bg-color, #fff)}.multi-columns-container{-webkit-box-shadow:var(--multi-checkbox-box-shadow, none);box-shadow:var(--multi-checkbox-box-shadow, none);width:var(multi-checkbox-column-container-width, -webkit-fit-content);width:var(multi-checkbox-column-container-width, -moz-fit-content);width:var(multi-checkbox-column-container-width, fit-content);height:var(multi-checkbox-column-container-height, -webkit-fit-content);height:var(multi-checkbox-column-container-height, -moz-fit-content);height:var(multi-checkbox-column-container-height, fit-content);background-color:var(--multi-checkbox-container-bg-color, none)}.border-bottom{border-bottom:1px solid var(--top-container-border-bottom-color, #e2e2e2)}.item-list-wrapper{overflow-y:auto;max-height:var(--multi-checkbox-max-height, 25rem)}.item-list-container{padding:0;margin:0;font-family:var(--checkbox-label-container-font-family, \"OpenSans\");font-size:var(--checkbox-label-container-font-size, 0.875rem)}.item-container{-webkit-box-sizing:border-box;box-sizing:border-box;padding:10px 8px}.header-container{padding:var(--multi-checkbox-header-container-padding, 10px 8px)}.header-checkbox{font-family:var(--header-checkbox-font-family, \"OpenSans-Semibold\");font-size:var(--header-checkbox-font-size, 1rem);--checkbox-text-container-subtext-position-right-max-width:none;--checkbox-subtext-color:var(--header-checkbox-subtext-color, #333);--checkbox-subtext-position-right-text-align:var(--header-checkbox-subtext-text-align, right)}.columns-container{list-style:none;display:grid;grid-template-columns:var(--multi-checkbox-template-columns, repeat(2, -webkit-max-content));grid-template-columns:var(--multi-checkbox-template-columns, repeat(2, max-content));grid-auto-columns:var(--multi-checkbox-auto-columns, -webkit-max-content);grid-auto-columns:var(--multi-checkbox-auto-columns, max-content);grid-row-gap:var(--multi-checkbox-row-gap, 0);grid-column-gap:var(--multi-checkbox-column-gap, 0);grid-template-rows:var(--multi-checkbox-template-rows, repeat(8, auto));-ms-flex-align:var(--multi-checkbox-grid-align-items, stretch);align-items:var(--multi-checkbox-grid-align-items, stretch);grid-auto-flow:var(--multi-checkbox-auto-flow, column);padding:0;margin:0;max-height:var(--multi-checkbox-max-height, none)}@media (hover: hover){.item-container:hover{background-color:var(--checkbox-item-bg-color, #eaf3fc);cursor:pointer}}.load-more-button{--icon-label-color:var(--multi-checkbox-load-more-button-color, #006be0);--icon-label-text-decoration:var(--multi-checkbox-load-more-button-text-decoration, underline);padding-left:4px}'}}]);","name":"27.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[27],{\n\n/***/ \"QxTW\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cel_multi_checkbox\", function() { return CelMultiCheckbox; });\n/* harmony import */ var _index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"luJw\");\n/* harmony import */ var _utils_f61264d9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"87XR\");\n/* harmony import */ var _constants_3952497d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"PREZ\");\n\n\n\n\nconst celMultiCheckboxCss = \".lst-table-responsive-wrapper{width:var(--lst-table-responsive-wrapper-width, auto);height:var(--lst-table-responsive-wrapper-height, auto);overflow:var(--lst-table-responsive-wrapper-overflow, scroll)}.lst-table{border-collapse:var(--lst-table-border-collapse, collapse);border:var(--lst-table-border, none);background-color:var(--lst-table-background-color, #fff);font-family:var(--lst-table-font-family, \\\"OpenSans\\\");line-height:var(--lst-table-line-height, 20px);font-size:var(--lst-table-font-size, 0.875rem)}.lst-table.compact>thead>tr>th,.lst-table.compact>tbody>tr>td{padding-top:var(--lst-table-padding-top-compact, 8.5px);padding-bottom:var(--lst-table-padding-top-compact, 8.5px)}.lst-table>thead tr{border-top:var(--lst-table-header-row-border-top, none);background-color:var(--lst-table-header-background-color, #fff);line-height:var(--lst-table-header-row-line-height, 20px);padding:var(--lst-table-padding, 17px 8px)}.lst-table>thead>tr>th{border-top:var(--lst-table-th-border-top, none);border-left:var(--lst-table-th-border-left, none);border-right:var(--lst-table-th-border-right, none);border-bottom:var(--lst-table-th-border-bottom, 1px solid #555);font-family:var(--lst-table-th-font-family, \\\"OpenSans-Semibold\\\");font-size:var(--lst-table-th-font-size, 0.875rem);line-height:var(--lst-table-th-line-height, 20px);padding:var(--lst-table-th-padding, 8px 4px);min-width:var(--lst-table-th-min-width, 64px);max-width:var(--lst-table-th-max-width, none);text-align:var(--lst-table-th-text-align, left);vertical-align:var(--lst-table-th-vertical-align, middle);white-space:nowrap}.lst-table>thead>tr>th>.lst-table-header-icon{vertical-align:var(--lst-table-header-icon-vertical-align, middle);margin-bottom:var(--lst-table-header-icon-margin-bottom, 1px 0)}.lst-table>thead>tr>th.align-center{text-align:center}.lst-table>thead>tr>th.interactive:hover{background-color:var(--lst-table-th-interactive-hover-bg-color, #e5f0f9);border-radius:var(--interactive-hover-th-border-radius, 4px 4px 0 0)}.lst-table>thead>tr>th.interactive:hover:has(.lst-table-select){border-radius:var(--interactive-hover-select-th-border-radius, 4px 0 0 0);--primary-select-background-color:#e5f0f9;--primary-styling-label-color:#2150a3;--select-caret-down-color-base:#2150a3}.lst-table tbody tr{border-top:var(--lst-table-tr-border-top, none);border-left:var(--lst-table-tr-border-left, none);border-right:var(--lst-table-tr-border-right, none);border-bottom:var(--lst-table-tr-border-bottom, 1px solid #d8d8d8);background-color:var(--lst-table-body-background-color, #fff)}.lst-table tbody tr:hover{background-color:var(--lst-tr-hover-bg-color, #e5f0f9)}.lst-table tbody tr>td{font-size:var(--lst-table-td-font-size, 0.875rem);border-bottom:var(--lst-table-td-border-bottom, none);border-left:var(--lst-table-td-border-left, none);border-right:var(--lst-table-td-border-right, none);padding:var(--lst-table-padding, 17px 8px)}.lst-table tbody tr>td.align-center{text-align:center}.lst-table tbody tr>td.align-left{padding-left:var(--lst-table-td-align-left-padding, none);text-align:left}.lst-table .lst-table-select{margin-right:4px;--single-select-label-font-size:$text-size-small;--single-select-label-font-family:$secondary-font-medium;--label-margin-bottom-borderless:0}button:active:disabled{outline:none}:root{--primary:#006be0;--primaryShade:#2150a3;--errorNotificationOrange:#BD4500}.cel-visually-hidden{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.zero-height-status-container{height:0}.green{background-color:#35AA35;color:#000}.red{background-color:#CC333F;color:#fff}.yellow{background-color:#FFBA4A;color:#000}.blue{background-color:#584CE4;color:#fff}.white{background-color:#fff;color:#333}.primary-shade{background-color:#2150a3;color:#fff}@media (hover: hover){.green.interactive:hover{background-color:#2A9A2A}.red.interactive:hover{background-color:#B42934}.yellow.interactive:hover{background-color:#E5A439}.blue.interactive:hover{background-color:#372CB4}}button,input,textarea{letter-spacing:unset;line-height:unset;word-spacing:unset;line-height:unset}:host{display:inline-block}.checkbox-item{width:100%;--checkbox-label-maxWidth:var(--checkbox-item-maxWidth, 100%);--checkbox-item-line-clamp:var(--multi-checkbox-item-line-clamp, 2);--checkbox-subtext-color:var(--multi-checkbox-item-subtext-color, #333);--checkbox-item-subtext-disabled-color:var(--multi-checkbox-item-subtext-disabled-color, #939393)}.multi-container{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;border-radius:var(--multi-checkbox-container-border-radius, 2px);overflow:hidden;-webkit-box-shadow:var(--multi-checkbox-box-shadow, 0 3px 5px 0 rgba(0, 0, 0, 0.36));box-shadow:var(--multi-checkbox-box-shadow, 0 3px 5px 0 rgba(0, 0, 0, 0.36));min-width:var(--multi-checkbox-container-min-width, 240px);background-color:var(--multi-checkbox-container-bg-color, #fff)}.multi-columns-container{-webkit-box-shadow:var(--multi-checkbox-box-shadow, none);box-shadow:var(--multi-checkbox-box-shadow, none);width:var(multi-checkbox-column-container-width, -webkit-fit-content);width:var(multi-checkbox-column-container-width, -moz-fit-content);width:var(multi-checkbox-column-container-width, fit-content);height:var(multi-checkbox-column-container-height, -webkit-fit-content);height:var(multi-checkbox-column-container-height, -moz-fit-content);height:var(multi-checkbox-column-container-height, fit-content);background-color:var(--multi-checkbox-container-bg-color, none)}.border-bottom{border-bottom:1px solid var(--top-container-border-bottom-color, #e2e2e2)}.item-list-wrapper{overflow-y:auto;max-height:var(--multi-checkbox-max-height, 25rem)}.item-list-container{padding:0;margin:0;font-family:var(--checkbox-label-container-font-family, \\\"OpenSans\\\");font-size:var(--checkbox-label-container-font-size, 0.875rem)}.item-container{-webkit-box-sizing:border-box;box-sizing:border-box;padding:10px 8px}.header-container{padding:var(--multi-checkbox-header-container-padding, 10px 8px)}.header-checkbox{font-family:var(--header-checkbox-font-family, \\\"OpenSans-Semibold\\\");font-size:var(--header-checkbox-font-size, 1rem);--checkbox-text-container-subtext-position-right-max-width:none;--checkbox-subtext-color:var(--header-checkbox-subtext-color, #333);--checkbox-subtext-position-right-text-align:var(--header-checkbox-subtext-text-align, right)}.columns-container{list-style:none;display:grid;grid-template-columns:var(--multi-checkbox-template-columns, repeat(2, -webkit-max-content));grid-template-columns:var(--multi-checkbox-template-columns, repeat(2, max-content));grid-auto-columns:var(--multi-checkbox-auto-columns, -webkit-max-content);grid-auto-columns:var(--multi-checkbox-auto-columns, max-content);grid-row-gap:var(--multi-checkbox-row-gap, 0);grid-column-gap:var(--multi-checkbox-column-gap, 0);grid-template-rows:var(--multi-checkbox-template-rows, repeat(8, auto));-ms-flex-align:var(--multi-checkbox-grid-align-items, stretch);align-items:var(--multi-checkbox-grid-align-items, stretch);grid-auto-flow:var(--multi-checkbox-auto-flow, column);padding:0;margin:0;max-height:var(--multi-checkbox-max-height, none)}@media (hover: hover){.item-container:hover{background-color:var(--checkbox-item-bg-color, #eaf3fc);cursor:pointer}}.load-more-button{--icon-label-color:var(--multi-checkbox-load-more-button-color, #006be0);--icon-label-text-decoration:var(--multi-checkbox-load-more-button-text-decoration, underline);padding-left:4px}\";\n\nconst CelMultiCheckbox = class {\n  constructor(hostRef) {\n    Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* r */ \"i\"])(this, hostRef);\n    this.celChange = Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* c */ \"d\"])(this, \"celMultiCheckboxChange\", 7);\n    this.filteredListLengthEvent = Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* c */ \"d\"])(this, \"celMultiCheckboxFilteredListLength\", 7);\n    this.loadMoreButtonClick = Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* c */ \"d\"])(this, \"celMultiCheckboxLoadMoreButtonClick\", 7);\n    this.displayCountChange = Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* c */ \"d\"])(this, \"celMultiCheckboxDisplayCountChange\", 7);\n    this.filterDisplayCountChange = Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* c */ \"d\"])(this, \"celMultiCheckboxFilterDisplayCountChange\", 7);\n    this.filteredList = [];\n    this.displayCount = undefined;\n    this.nextLoadedItemIndex = null;\n    this.filter = '';\n    this.itemList = [];\n    this.hideAll = undefined;\n    this.multiCheckboxAriaLabel = 'multi checkbox';\n    this.emptyResultLabel = '';\n    this.maxCheckboxEnabled = undefined;\n    this.showLoader = false;\n    this.enableColumns = false;\n    this.displayCountConfig = null;\n    this.loadMoreConfig = null;\n    this.selectAllConfig = {\n      selectAllLabel: 'Select All',\n      selectAllFilterLabel: 'Select All Visible',\n    };\n    this.initialItemCount = null;\n  }\n  connectedCallback() {\n    this.cel_checkbox_item = Object(_utils_f61264d9_js__WEBPACK_IMPORTED_MODULE_1__[/* t */ \"k\"])('cel-checkbox-item', 'cel-multi-checkbox', this.el);\n    this.cel_icon_label = Object(_utils_f61264d9_js__WEBPACK_IMPORTED_MODULE_1__[/* t */ \"k\"])('cel-icon-label', 'cel-multi-checkbox', this.el);\n  }\n  handleItemListChange() {\n    this.celChange.emit(this.itemList);\n  }\n  handleFilterChange() {\n    var _a, _b;\n    /* clear nextLoadedItemIndex if multi-select search field is focused (need to save index still if filter results in\n       more items than there are currently displayed) */\n    if (this.loadMoreConfig && !((_b = (_a = this.el) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.activeElement) && this.nextLoadedItemIndex != null) {\n      this.nextLoadedItemIndex = null;\n    }\n    if (this.displayCountConfig) {\n      if (!this.filter || this.filteredList.length >= this.displayCount) {\n        if (this.displayCountConfig.itemCount !== this.displayCount) {\n          this.updateDisplayCountConfigOnFilter(this.displayCount);\n        }\n      }\n      else if (this.displayCountConfig.itemCount !== this.filteredList.length) {\n        this.updateDisplayCountConfigOnFilter(this.filteredList.length);\n      }\n    }\n    this.filteredList = this.itemList.filter((item) => item.label.toLowerCase().includes(this.filter.toLowerCase()));\n    const checked = this.filteredList.filter(item => item.checked).length;\n    const disabled = this.filteredList.filter(item => item.disabled).length;\n    if (!this.headerCelCheckbox)\n      return;\n    if (checked < this.filteredList.length - disabled) {\n      this.headerCelCheckbox.shadowRoot.querySelector('input').checked = false;\n    }\n    else {\n      this.headerCelCheckbox.shadowRoot.querySelector('input').checked = true;\n    }\n    if (this.filter === '') {\n      this.filteredList = [];\n    }\n    this.filteredListLengthEvent.emit(this.filteredList.length);\n  }\n  updateDisplayCountConfigOnFilter(count) {\n    this.updateDisplayCountConfig(count);\n    this.displayCountChange.emit(this.displayCountConfig);\n    this.filterDisplayCountChange.emit(this.displayCount);\n  }\n  componentDidLoad() {\n    const checked = this.scanList(this.itemList);\n    if (!this.headerCelCheckbox)\n      return;\n    switch (checked) {\n      case 0:\n        this.headerCelCheckbox.shadowRoot ? (this.headerCelCheckbox.shadowRoot.querySelector('input').checked = false) : null;\n        break;\n      case this.itemList.length:\n        this.headerCelCheckbox.shadowRoot.querySelector('input').checked = true;\n        break;\n      // DO NOTHING\n    }\n  }\n  handleMultiSelect() {\n    this.deselectAll();\n    if (!this.headerCelCheckbox)\n      return;\n    this.headerCelCheckbox.shadowRoot.querySelector('input').checked = false;\n    if (this.itemList.every(i => i.checked)) {\n      this.itemList.map(i => i.checked = false);\n    }\n  }\n  handleHeaderCheckboxChange(event) {\n    if (event.detail.checkboxType == 'header-checkbox') {\n      this.toggleAll(event);\n    }\n  }\n  handleCelCheckboxChange(event) {\n    //update master item list\n    const updatedList = this.itemList.map((item) => {\n      if (event.detail.identifier === item.identifier) {\n        return { ...item, checked: event.detail.checked };\n      }\n      else {\n        return item;\n      }\n    });\n    //update filtered list if there is one\n    if (this.filter && this.filter !== '') {\n      const updatedFilteredList = this.filteredList.map((item) => {\n        if (event.detail.identifier === item.identifier) {\n          return { ...item, checked: event.detail.checked };\n        }\n        else {\n          return item;\n        }\n      });\n      this.filteredList = updatedFilteredList;\n    }\n    this.itemList = updatedList;\n  }\n  passClick(event) {\n    const target = event.target;\n    if (target.className.includes('item-container')) {\n      const celCheckbox = target.firstChild;\n      celCheckbox.shadowRoot.querySelector('label').click();\n    }\n  }\n  passMouseEnter(event) {\n    var _a;\n    const target = event.target;\n    if (target.className.includes('item-container')) {\n      const celCheckbox = target.firstChild;\n      (_a = celCheckbox.shadowRoot.querySelector('label')) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n  }\n  passMouseLeave(event) {\n    const target = event.target;\n    if (target.className.includes('item-container')) {\n      const celCheckbox = target.firstChild;\n      celCheckbox.shadowRoot.querySelector('label').dispatchEvent(new MouseEvent('mouseleave'));\n    }\n  }\n  scanList(itemList) {\n    let count = 0;\n    for (let i = 0; i < itemList.length; i++) {\n      if (itemList[i].checked) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n  toggleAll(event) {\n    event.detail.checked ? this.selectAll() : this.deselectAll();\n  }\n  selectAll() {\n    const updatedList = this.itemList.map((item) => {\n      if (item.label.toLowerCase().includes(this.filter.toLowerCase()) && !item.disabled) {\n        return { ...item, checked: true };\n      }\n      else {\n        return item;\n      }\n    });\n    this.itemList = updatedList;\n  }\n  deselectAll() {\n    if (this.filter) {\n      const updatedList = this.itemList.map((item) => {\n        if (item.label.toLowerCase().includes(this.filter.toLowerCase()) && !item.disabled) {\n          return { ...item, checked: false };\n        }\n        else {\n          return item;\n        }\n      });\n      this.itemList = updatedList;\n    }\n    else {\n      const allDeselected = this.itemList.map((item) => {\n        if (!item.disabled) {\n          return { ...item, checked: false };\n        }\n        else {\n          return item;\n        }\n      });\n      this.itemList = allDeselected;\n    }\n  }\n  checkSearchResult(itemList, filter) {\n    let isSearchEmpty = true;\n    itemList.forEach((data) => {\n      if (filter && data.label.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())) {\n        isSearchEmpty = false;\n      }\n    });\n    return isSearchEmpty;\n  }\n  getDataLabel() {\n    if (!this.filter || this.filter === '') {\n      if (!this.selectAllConfig.showTotalItemCount) {\n        return `${this.selectAllConfig.selectAllLabel}`;\n      }\n      else {\n        const itemCount = Number.isInteger(this.selectAllConfig.totalItemCount) ? this.selectAllConfig.totalItemCount : this.itemList.length;\n        return `${this.selectAllConfig.selectAllLabel} ${itemCount.toLocaleString()}`;\n      }\n    }\n    else {\n      return `${this.selectAllConfig.selectAllFilterLabel}`;\n    }\n  }\n  getSelectAllCheckboxState(itemList) {\n    if (itemList.length === 0)\n      return false;\n    const checkItemList = (this.filter) ? [...this.filteredList] : [...this.itemList];\n    const anyDisabled = checkItemList.some(item => item.disabled);\n    const allChecked = checkItemList.every(item => item.checked);\n    this.syncFilteredState();\n    return allChecked || (anyDisabled && checkItemList.every(item => item.checked || item.disabled));\n  }\n  syncFilteredState() {\n    if (this.filter)\n      this.handleFilterChange();\n  }\n  componentWillLoad() {\n    var _a, _b;\n    if (!this.initialItemCount && this.displayCountConfig) {\n      this.initialItemCount = ((_a = this.displayCountConfig) === null || _a === void 0 ? void 0 : _a.itemCount) || ((_b = this.loadMoreConfig) === null || _b === void 0 ? void 0 : _b.increment) || 0;\n    }\n    this.initializeDisplayCount();\n    this.syncFilteredState();\n  }\n  handleShowLoaderChange(newValue, oldValue) {\n    if (!newValue && oldValue && (this.displayCountConfig || this.loadMoreConfig)) {\n      if (this.displayCountConfig) {\n        this.updateDisplayCountConfig(this.initialItemCount);\n      }\n      this.initializeDisplayCount();\n      if (this.displayCountConfig) {\n        this.displayCountChange.emit(this.displayCountConfig);\n      }\n    }\n  }\n  handleDisplayCountConfigChange() {\n    if (this.displayCountConfig && this.displayCountConfig.itemCount !== this.displayCount && !this.filter) {\n      this.updateDisplayCountFromDisplayCountConfig();\n    }\n  }\n  updateDisplayCountFromDisplayCountConfig() {\n    if (this.displayCountConfig.itemCount < 0 || !this.displayCountConfig.itemCount) {\n      this.displayCount = 0;\n    }\n    else if (this.displayCountConfig.itemCount > this.itemList.length) {\n      this.displayCount = this.itemList.length;\n    }\n    else {\n      this.displayCount = this.displayCountConfig.itemCount;\n    }\n    this.updateDisplayCountConfig(this.displayCount);\n  }\n  handleLoadMoreButtonClick() {\n    if (this.loadMoreConfig.increment <= 0) {\n      return;\n    }\n    // store the index of the first new item that will be displayed\n    this.nextLoadedItemIndex = this.filter ?\n      this.itemList.findIndex((elt) => elt.identifier === this.filteredList[this.displayCount].identifier)\n      : this.displayCount;\n    this.displayCount = (this.displayCount + this.loadMoreConfig.increment > this.itemList.length) ?\n      this.itemList.length : this.displayCount + this.loadMoreConfig.increment;\n    if (this.displayCountConfig) {\n      this.updateDisplayCountConfig(this.displayCount);\n      this.displayCountChange.emit(this.displayCountConfig);\n      if (this.filter) {\n        this.filterDisplayCountChange.emit(this.displayCount);\n      }\n    }\n    this.loadMoreButtonClick.emit(this.displayCount);\n  }\n  updateDisplayCountConfig(count) {\n    var _a;\n    if (count !== ((_a = this.displayCountConfig) === null || _a === void 0 ? void 0 : _a.itemCount)) {\n      this.displayCountConfig = { ...this.displayCountConfig, itemCount: count };\n    }\n  }\n  initializeDisplayCount() {\n    var _a, _b;\n    // initialize displayCount if displayCountConfig or loadMoreConfig is defined\n    if (Number.isInteger((_a = this.displayCountConfig) === null || _a === void 0 ? void 0 : _a.itemCount)) {\n      this.updateDisplayCountFromDisplayCountConfig();\n    }\n    else if (Number.isInteger((_b = this.loadMoreConfig) === null || _b === void 0 ? void 0 : _b.increment)) {\n      if (this.loadMoreConfig.increment < 0) {\n        this.displayCount = 0;\n      }\n      else if (this.loadMoreConfig.increment > this.itemList.length) {\n        this.displayCount = this.itemList.length;\n      }\n      else {\n        this.displayCount = this.loadMoreConfig.increment;\n      }\n    }\n    else {\n      this.displayCount = this.itemList.length;\n    }\n    if (this.displayCountConfig && this.displayCountConfig.itemCount !== this.displayCount) {\n      this.updateDisplayCountConfig(this.displayCount);\n    }\n  }\n  render() {\n    var _a;\n    const noDataFound = this.checkSearchResult(this.itemList, this.filter);\n    return (Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"g\"])(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* H */ \"a\"], { \"data-cel-version\": '10.1.4' }, Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"g\"])(\"div\", { class: ['multi-container', this.enableColumns ? 'multi-columns-container' : ''].join(' '), role: \"group\", \"aria-label\": this.multiCheckboxAriaLabel }, !this.hideAll ? (Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"g\"])(\"div\", { class: ['header-container item-container border-bottom', this.getSelectAllCheckboxState(this.itemList) ? 'checked' : ''].join(' '), onMouseOver: (ev) => this.passMouseEnter(ev), onMouseLeave: (ev) => this.passMouseLeave(ev), onClick: (ev) => this.passClick(ev) }, Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"g\"])(this.cel_checkbox_item, { \"data-identifier\": 'cci-header-checkbox', ref: (el) => (this.headerCelCheckbox = el), \"data-checkbox-type\": _constants_3952497d_js__WEBPACK_IMPORTED_MODULE_2__[/* H */ \"f\"], \"data-checked\": this.getSelectAllCheckboxState(this.itemList), class: 'header-checkbox', \"data-label\": this.getDataLabel(), \"data-disabled\": this.showLoader, \"data-subtext\": this.displayCountConfig ? `${this.displayCountConfig.displayingLabel} ${(_a = this.displayCountConfig.itemCount) === null || _a === void 0 ? void 0 : _a.toLocaleString()}` : null, \"data-subtext-position\": this.displayCountConfig ? _constants_3952497d_js__WEBPACK_IMPORTED_MODULE_2__[/* P */ \"l\"].RIGHT : null, \"data-is-subtext-live-region\": !!this.displayCountConfig }))) : null, this.showLoader ? null :\n      Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"g\"])(\"div\", { class: \"item-list-wrapper\" }, Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"g\"])(\"ul\", { class: ['item-list-container', this.enableColumns ? 'columns-container' : ''].join(' ') }, this.itemList.map((item, i, row) => {\n        if (this.filter && noDataFound && i + 1 === row.length) {\n          return Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"g\"])(\"li\", null, this.emptyResultLabel);\n        }\n        if (this.filter && !item.label.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())) {\n          return;\n        }\n        if ((this.displayCountConfig || this.loadMoreConfig) && ((i >= this.displayCount && !this.filter) ||\n          this.filter && this.filteredList.findIndex((elt) => elt.identifier === item.identifier) >= this.displayCount)) {\n          return;\n        }\n        {\n          return (Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"g\"])(\"li\", { class: ['item-container', item.checked ? 'checked' : ''].join(' '), onClick: (ev) => this.passClick(ev), onMouseOver: (ev) => this.passMouseEnter(ev), onMouseLeave: (ev) => this.passMouseLeave(ev) }, Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"g\"])(this.cel_checkbox_item, { class: 'checkbox-item', \"data-identifier\": item.identifier, \"data-label\": item.label, \"data-checked\": item.checked, \"data-disabled\": item.disabled, \"data-subtext\": item.subtext, \"data-focus-element\": this.loadMoreConfig && i === this.nextLoadedItemIndex })));\n        }\n      })), this.loadMoreConfig && ((!this.filter && this.itemList.length > this.displayCount) || (this.filter && this.filteredList.length > this.displayCount)) ?\n        Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"g\"])(this.cel_icon_label, { class: \"load-more-button\", \"data-label\": this.loadMoreConfig.loadMoreLabel })\n        : null))));\n  }\n  get el() { return Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* g */ \"f\"])(this); }\n  static get watchers() { return {\n    \"itemList\": [\"handleItemListChange\"],\n    \"filter\": [\"handleFilterChange\"],\n    \"showLoader\": [\"handleShowLoaderChange\"],\n    \"displayCountConfig\": [\"handleDisplayCountConfigChange\"]\n  }; }\n};\nCelMultiCheckbox.style = celMultiCheckboxCss;\n\n\n\n\n/***/ })\n\n}]);","inputSourceMap":null}