{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{QxTW:function(e,t,i){\"use strict\";i.r(t),i.d(t,\"cel_multi_checkbox\",function(){return r});var l=i(\"luJw\"),o=i(\"nNSG\"),a=i(\"sOVx\");const r=class{constructor(e){Object(l.g)(this,e),this.celChange=Object(l.c)(this,\"celMultiCheckboxChange\",7),this.filteredListLengthEvent=Object(l.c)(this,\"celMultiCheckboxFilteredListLength\",7),this.filteredList=[],this.filter=\"\",this.truncateLength=43,this.itemList=[],this.hideAll=void 0,this.multiCheckboxAriaLabel=\"multi checkbox\",this.emptyResultLabel=\"\",this.maxCheckboxEnabled=void 0,this.showLoader=!1,this.enableColumns=!1}connectedCallback(){this.cel_checkbox_item=Object(o.j)(\"cel-checkbox-item\",\"cel-multi-checkbox\",this.el)}handleItemListChange(){this.celChange.emit(this.itemList)}handleFilterChange(){this.filteredList=this.itemList.filter(e=>e.label.toLowerCase().includes(this.filter.toLowerCase()));const e=this.filteredList.filter(e=>e.checked).length,t=this.filteredList.filter(e=>e.disabled).length;this.headerCelCheckbox&&(this.headerCelCheckbox.shadowRoot.querySelector(\"input\").checked=!(e<this.filteredList.length-t),\"\"===this.filter&&(this.filteredList=[]),this.filteredListLengthEvent.emit(this.filteredList.length))}componentDidLoad(){const e=this.scanList(this.itemList);if(this.headerCelCheckbox)switch(e){case 0:this.headerCelCheckbox.shadowRoot&&(this.headerCelCheckbox.shadowRoot.querySelector(\"input\").checked=!1);break;case this.itemList.length:this.headerCelCheckbox.shadowRoot.querySelector(\"input\").checked=!0}}handleMultiSelect(){this.deselectAll(),this.headerCelCheckbox&&(this.headerCelCheckbox.shadowRoot.querySelector(\"input\").checked=!1,this.itemList.every(e=>e.checked)&&this.itemList.map(e=>e.checked=!1))}handleHeaderCheckboxChange(e){\"header-checkbox\"==e.detail.checkboxType&&this.toggleAll(e)}handleCelCheckboxChange(e){const t=this.itemList.map(t=>e.detail.identifier===t.identifier?{...t,checked:e.detail.checked}:t);if(this.filter&&\"\"!==this.filter){const t=this.filteredList.map(t=>e.detail.identifier===t.identifier?{...t,checked:e.detail.checked}:t);this.filteredList=t}this.itemList=t}passClick(e){const t=e.target;t.className.includes(\"item-container\")&&t.firstChild.shadowRoot.querySelector(\"label\").click()}passMouseEnter(e){const t=e.target;t.className.includes(\"item-container\")&&t.firstChild.shadowRoot.querySelector(\"label\").dispatchEvent(new MouseEvent(\"mouseenter\"))}passMouseLeave(e){const t=e.target;t.className.includes(\"item-container\")&&t.firstChild.shadowRoot.querySelector(\"label\").dispatchEvent(new MouseEvent(\"mouseleave\"))}scanList(e){let t=0;for(let i=0;i<e.length;i++)e[i].checked&&(t+=1);return t}toggleAll(e){e.detail.checked?this.selectAll():this.deselectAll()}selectAll(){const e=this.itemList.map(e=>e.label.toLowerCase().includes(this.filter.toLowerCase())&&!e.disabled?{...e,checked:!0}:e);this.itemList=e}deselectAll(){if(this.filter){const e=this.itemList.map(e=>e.label.toLowerCase().includes(this.filter.toLowerCase())&&!e.disabled?{...e,checked:!1}:e);this.itemList=e}else{const e=this.itemList.map(e=>e.disabled?e:{...e,checked:!1});this.itemList=e}}checkSearchResult(e,t){let i=!0;return e.forEach(e=>{t&&e.label.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())&&(i=!1)}),i}getDataLabel(){return this.filter&&\"\"!==this.filter?\"Select All Visible\":\"Select All\"}getSelectAllCheckboxState(e){if(0===e.length)return!1;const t=this.filter?[...this.filteredList]:[...this.itemList],i=t.some(e=>e.disabled),l=t.every(e=>e.checked);return this.syncFilteredState(),l||i&&t.every(e=>e.checked||e.disabled)}syncFilteredState(){this.filter&&this.handleFilterChange()}componentWillLoad(){this.syncFilteredState()}render(){const e=this.checkSearchResult(this.itemList,this.filter);return Object(l.e)(l.a,{\"data-cel-version\":\"9.0.6\"},Object(l.e)(\"div\",{class:[\"multi-container\",this.enableColumns?\"multi-columns-container\":\"\"].join(\" \"),role:\"group\",\"aria-label\":this.multiCheckboxAriaLabel},this.hideAll?null:Object(l.e)(\"div\",{class:[\"header-container item-container border-bottom\",this.getSelectAllCheckboxState(this.itemList)?\"checked\":\"\"].join(\" \"),onMouseOver:e=>this.passMouseEnter(e),onMouseLeave:e=>this.passMouseLeave(e),onClick:e=>this.passClick(e)},Object(l.e)(this.cel_checkbox_item,{\"data-identifier\":\"cci-header-checkbox\",ref:e=>this.headerCelCheckbox=e,\"data-checkbox-type\":a.f,\"data-checked\":this.getSelectAllCheckboxState(this.itemList),class:\"header-checkbox\",\"data-label\":this.getDataLabel(),\"data-truncate-length\":this.truncateLength,\"data-disabled\":this.showLoader})),this.showLoader?null:Object(l.e)(\"ul\",{class:[\"item-list-container\",this.enableColumns?\"columns-container\":\"\"].join(\" \")},this.itemList.map((t,i,o)=>this.filter&&e&&i+1===o.length?Object(l.e)(\"li\",null,this.emptyResultLabel):!this.filter||t.label.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())?Object(l.e)(\"li\",{class:[\"item-container\",t.checked?\"checked\":\"\"].join(\" \"),onClick:e=>this.passClick(e),onMouseOver:e=>this.passMouseEnter(e),onMouseLeave:e=>this.passMouseLeave(e)},Object(l.e)(this.cel_checkbox_item,{class:\"checkbox-item\",\"data-identifier\":t.identifier,\"data-label\":t.label,\"data-checked\":t.checked,\"data-disabled\":t.disabled,\"data-truncate-length\":this.truncateLength,\"data-subtext\":t.subtext})):void 0))))}get el(){return Object(l.d)(this)}static get watchers(){return{itemList:[\"handleItemListChange\"],filter:[\"handleFilterChange\"]}}};r.style='.lst-table-responsive-wrapper{width:var(--lst-table-responsive-wrapper-width, auto);height:var(--lst-table-responsive-wrapper-height, auto);overflow:var(--lst-table-responsive-wrapper-overflow, scroll)}.lst-table{border-collapse:var(--lst-table-border-collapse, collapse);border:var(--lst-table-border, none);background-color:var(--lst-table-background-color, #fff);font-family:var(--lst-table-font-family, \"OpenSans\");line-height:var(--lst-table-line-height, 20px);font-size:var(--lst-table-font-size, 0.875rem)}.lst-table.compact>thead>tr>th,.lst-table.compact>tbody>tr>td{padding-top:var(--lst-table-padding-top-compact, 8.5px);padding-bottom:var(--lst-table-padding-top-compact, 8.5px)}.lst-table>thead tr{border-top:var(--lst-table-header-row-border-top, none);background-color:var(--lst-table-header-background-color, #fff);line-height:var(--lst-table-header-row-line-height, 20px);padding:var(--lst-table-padding, 17px 8px)}.lst-table>thead>tr>th{border-top:var(--lst-table-th-border-top, none);border-left:var(--lst-table-th-border-left, none);border-right:var(--lst-table-th-border-right, none);border-bottom:var(--lst-table-th-border-bottom, 1px solid #555);font-family:var(--lst-table-th-font-family, \"OpenSans-Semibold\");font-size:var(--lst-table-th-font-size, 0.875rem);line-height:var(--lst-table-th-line-height, 20px);padding:var(--lst-table-th-padding, 8px 4px);min-width:var(--lst-table-th-min-width, 64px);max-width:var(--lst-table-th-max-width, none);text-align:var(--lst-table-th-text-align, left);vertical-align:var(--lst-table-th-vertical-align, middle);white-space:nowrap}.lst-table>thead>tr>th>.lst-table-header-icon{vertical-align:var(--lst-table-header-icon-vertical-align, middle);margin-bottom:var(--lst-table-header-icon-margin-bottom, 1px 0)}.lst-table>thead>tr>th.align-center{text-align:center}.lst-table>thead>tr>th.interactive:hover{background-color:var(--lst-table-th-interactive-hover-bg-color, #e5f0f9);border-radius:var(--interactive-hover-th-border-radius, 4px 4px 0 0)}.lst-table>thead>tr>th.interactive:hover:has(.lst-table-select){border-radius:var(--interactive-hover-select-th-border-radius, 4px 0 0 0);--primary-select-background-color:#e5f0f9;--primary-styling-label-color:#2150a3;--select-caret-down-color-base:#2150a3}.lst-table tbody tr{border-top:var(--lst-table-tr-border-top, none);border-left:var(--lst-table-tr-border-left, none);border-right:var(--lst-table-tr-border-right, none);border-bottom:var(--lst-table-tr-border-bottom, 1px solid #d8d8d8);background-color:var(--lst-table-body-background-color, #fff)}.lst-table tbody tr:hover{background-color:var(--lst-tr-hover-bg-color, #e5f0f9)}.lst-table tbody tr>td{font-size:var(--lst-table-td-font-size, 0.875rem);border-bottom:var(--lst-table-td-border-bottom, none);border-left:var(--lst-table-td-border-left, none);border-right:var(--lst-table-td-border-right, none);padding:var(--lst-table-padding, 17px 8px)}.lst-table tbody tr>td.align-center{text-align:center}.lst-table tbody tr>td.align-left{padding-left:var(--lst-table-td-align-left-padding, none);text-align:left}.lst-table .lst-table-select{margin-right:4px;--single-select-label-font-size:$text-size-small;--single-select-label-font-family:$secondary-font-medium;--label-margin-bottom-borderless:0}button:active:disabled{outline:none}:root{--primary:#006be0;--primaryShade:#2150a3;--errorNotificationOrange:#BD4500}.cel-visually-hidden{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.green{background-color:#35AA35;color:#000}.red{background-color:#CC333F;color:#fff}.yellow{background-color:#FFBA4A;color:#000}.blue{background-color:#584CE4;color:#fff}.white{background-color:#fff;color:#333}@media (hover: hover){.green.interactive:hover{background-color:#2A9A2A}.red.interactive:hover{background-color:#B42934}.yellow.interactive:hover{background-color:#E5A439}.blue.interactive:hover{background-color:#372CB4}}button,input,textarea{letter-spacing:unset;line-height:unset;word-spacing:unset;line-height:unset}:host{display:inline-block}.checkbox-item{width:100%;--checkbox-label-maxWidth:var(--checkbox-item-maxWidth, 100%)}.multi-container{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;border-radius:var(--multi-checkbox-container-border-radius, 2px);overflow:hidden;-webkit-box-shadow:var(--multi-checkbox-box-shadow, 0 3px 5px 0 rgba(0, 0, 0, 0.36));box-shadow:var(--multi-checkbox-box-shadow, 0 3px 5px 0 rgba(0, 0, 0, 0.36));min-width:var(--multi-checkbox-container-min-width, 240px);background-color:var(--multi-checkbox-container-bg-color, #fff)}.multi-columns-container{-webkit-box-shadow:var(--multi-checkbox-box-shadow, none);box-shadow:var(--multi-checkbox-box-shadow, none);width:var(multi-checkbox-column-container-width, -webkit-fit-content);width:var(multi-checkbox-column-container-width, -moz-fit-content);width:var(multi-checkbox-column-container-width, fit-content);height:var(multi-checkbox-column-container-height, -webkit-fit-content);height:var(multi-checkbox-column-container-height, -moz-fit-content);height:var(multi-checkbox-column-container-height, fit-content);background-color:var(--multi-checkbox-container-bg-color, none)}.border-bottom{border-bottom:1px solid var(--top-container-border-bottom-color, #e2e2e2)}.item-list-container{padding:0;margin:0;max-height:var(--multi-checkbox-max-height, 25rem);overflow:auto;font-family:var(--checkbox-label-container-font-family, \"OpenSans\");font-size:var(--checkbox-label-container-font-size, 0.875rem)}.item-container{-webkit-box-sizing:border-box;box-sizing:border-box;padding:10px 8px}.header-checkbox{font-family:var(--header-checkbox-font-family, \"OpenSans-Semibold\");font-size:var(--header-checkbox-font-size, 1rem)}.columns-container{list-style:none;display:grid;grid-template-columns:var(--multi-checkbox-template-columns, repeat(2, -webkit-max-content));grid-template-columns:var(--multi-checkbox-template-columns, repeat(2, max-content));grid-auto-columns:var(--multi-checkbox-auto-columns, -webkit-max-content);grid-auto-columns:var(--multi-checkbox-auto-columns, max-content);grid-row-gap:var(--multi-checkbox-row-gap, 0);grid-column-gap:var(--multi-checkbox-column-gap, 0);grid-template-rows:var(--multi-checkbox-template-rows, repeat(8, auto));-ms-flex-align:var(--multi-checkbox-grid-align-items, stretch);align-items:var(--multi-checkbox-grid-align-items, stretch);grid-auto-flow:var(--multi-checkbox-auto-flow, column);padding:0;margin:0;max-height:var(--multi-checkbox-max-height, none)}@media (hover: hover){.item-container:hover{background-color:var(--checkbox-item-bg-color, #cdcdcd);cursor:pointer}}'}}]);","name":"26.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[26],{\n\n/***/ \"QxTW\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cel_multi_checkbox\", function() { return CelMultiCheckbox; });\n/* harmony import */ var _index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"luJw\");\n/* harmony import */ var _utils_dc91c7d7_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"nNSG\");\n/* harmony import */ var _constants_34e654b0_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"sOVx\");\n\n\n\n\nconst celMultiCheckboxCss = \".lst-table-responsive-wrapper{width:var(--lst-table-responsive-wrapper-width, auto);height:var(--lst-table-responsive-wrapper-height, auto);overflow:var(--lst-table-responsive-wrapper-overflow, scroll)}.lst-table{border-collapse:var(--lst-table-border-collapse, collapse);border:var(--lst-table-border, none);background-color:var(--lst-table-background-color, #fff);font-family:var(--lst-table-font-family, \\\"OpenSans\\\");line-height:var(--lst-table-line-height, 20px);font-size:var(--lst-table-font-size, 0.875rem)}.lst-table.compact>thead>tr>th,.lst-table.compact>tbody>tr>td{padding-top:var(--lst-table-padding-top-compact, 8.5px);padding-bottom:var(--lst-table-padding-top-compact, 8.5px)}.lst-table>thead tr{border-top:var(--lst-table-header-row-border-top, none);background-color:var(--lst-table-header-background-color, #fff);line-height:var(--lst-table-header-row-line-height, 20px);padding:var(--lst-table-padding, 17px 8px)}.lst-table>thead>tr>th{border-top:var(--lst-table-th-border-top, none);border-left:var(--lst-table-th-border-left, none);border-right:var(--lst-table-th-border-right, none);border-bottom:var(--lst-table-th-border-bottom, 1px solid #555);font-family:var(--lst-table-th-font-family, \\\"OpenSans-Semibold\\\");font-size:var(--lst-table-th-font-size, 0.875rem);line-height:var(--lst-table-th-line-height, 20px);padding:var(--lst-table-th-padding, 8px 4px);min-width:var(--lst-table-th-min-width, 64px);max-width:var(--lst-table-th-max-width, none);text-align:var(--lst-table-th-text-align, left);vertical-align:var(--lst-table-th-vertical-align, middle);white-space:nowrap}.lst-table>thead>tr>th>.lst-table-header-icon{vertical-align:var(--lst-table-header-icon-vertical-align, middle);margin-bottom:var(--lst-table-header-icon-margin-bottom, 1px 0)}.lst-table>thead>tr>th.align-center{text-align:center}.lst-table>thead>tr>th.interactive:hover{background-color:var(--lst-table-th-interactive-hover-bg-color, #e5f0f9);border-radius:var(--interactive-hover-th-border-radius, 4px 4px 0 0)}.lst-table>thead>tr>th.interactive:hover:has(.lst-table-select){border-radius:var(--interactive-hover-select-th-border-radius, 4px 0 0 0);--primary-select-background-color:#e5f0f9;--primary-styling-label-color:#2150a3;--select-caret-down-color-base:#2150a3}.lst-table tbody tr{border-top:var(--lst-table-tr-border-top, none);border-left:var(--lst-table-tr-border-left, none);border-right:var(--lst-table-tr-border-right, none);border-bottom:var(--lst-table-tr-border-bottom, 1px solid #d8d8d8);background-color:var(--lst-table-body-background-color, #fff)}.lst-table tbody tr:hover{background-color:var(--lst-tr-hover-bg-color, #e5f0f9)}.lst-table tbody tr>td{font-size:var(--lst-table-td-font-size, 0.875rem);border-bottom:var(--lst-table-td-border-bottom, none);border-left:var(--lst-table-td-border-left, none);border-right:var(--lst-table-td-border-right, none);padding:var(--lst-table-padding, 17px 8px)}.lst-table tbody tr>td.align-center{text-align:center}.lst-table tbody tr>td.align-left{padding-left:var(--lst-table-td-align-left-padding, none);text-align:left}.lst-table .lst-table-select{margin-right:4px;--single-select-label-font-size:$text-size-small;--single-select-label-font-family:$secondary-font-medium;--label-margin-bottom-borderless:0}button:active:disabled{outline:none}:root{--primary:#006be0;--primaryShade:#2150a3;--errorNotificationOrange:#BD4500}.cel-visually-hidden{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.green{background-color:#35AA35;color:#000}.red{background-color:#CC333F;color:#fff}.yellow{background-color:#FFBA4A;color:#000}.blue{background-color:#584CE4;color:#fff}.white{background-color:#fff;color:#333}@media (hover: hover){.green.interactive:hover{background-color:#2A9A2A}.red.interactive:hover{background-color:#B42934}.yellow.interactive:hover{background-color:#E5A439}.blue.interactive:hover{background-color:#372CB4}}button,input,textarea{letter-spacing:unset;line-height:unset;word-spacing:unset;line-height:unset}:host{display:inline-block}.checkbox-item{width:100%;--checkbox-label-maxWidth:var(--checkbox-item-maxWidth, 100%)}.multi-container{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;border-radius:var(--multi-checkbox-container-border-radius, 2px);overflow:hidden;-webkit-box-shadow:var(--multi-checkbox-box-shadow, 0 3px 5px 0 rgba(0, 0, 0, 0.36));box-shadow:var(--multi-checkbox-box-shadow, 0 3px 5px 0 rgba(0, 0, 0, 0.36));min-width:var(--multi-checkbox-container-min-width, 240px);background-color:var(--multi-checkbox-container-bg-color, #fff)}.multi-columns-container{-webkit-box-shadow:var(--multi-checkbox-box-shadow, none);box-shadow:var(--multi-checkbox-box-shadow, none);width:var(multi-checkbox-column-container-width, -webkit-fit-content);width:var(multi-checkbox-column-container-width, -moz-fit-content);width:var(multi-checkbox-column-container-width, fit-content);height:var(multi-checkbox-column-container-height, -webkit-fit-content);height:var(multi-checkbox-column-container-height, -moz-fit-content);height:var(multi-checkbox-column-container-height, fit-content);background-color:var(--multi-checkbox-container-bg-color, none)}.border-bottom{border-bottom:1px solid var(--top-container-border-bottom-color, #e2e2e2)}.item-list-container{padding:0;margin:0;max-height:var(--multi-checkbox-max-height, 25rem);overflow:auto;font-family:var(--checkbox-label-container-font-family, \\\"OpenSans\\\");font-size:var(--checkbox-label-container-font-size, 0.875rem)}.item-container{-webkit-box-sizing:border-box;box-sizing:border-box;padding:10px 8px}.header-checkbox{font-family:var(--header-checkbox-font-family, \\\"OpenSans-Semibold\\\");font-size:var(--header-checkbox-font-size, 1rem)}.columns-container{list-style:none;display:grid;grid-template-columns:var(--multi-checkbox-template-columns, repeat(2, -webkit-max-content));grid-template-columns:var(--multi-checkbox-template-columns, repeat(2, max-content));grid-auto-columns:var(--multi-checkbox-auto-columns, -webkit-max-content);grid-auto-columns:var(--multi-checkbox-auto-columns, max-content);grid-row-gap:var(--multi-checkbox-row-gap, 0);grid-column-gap:var(--multi-checkbox-column-gap, 0);grid-template-rows:var(--multi-checkbox-template-rows, repeat(8, auto));-ms-flex-align:var(--multi-checkbox-grid-align-items, stretch);align-items:var(--multi-checkbox-grid-align-items, stretch);grid-auto-flow:var(--multi-checkbox-auto-flow, column);padding:0;margin:0;max-height:var(--multi-checkbox-max-height, none)}@media (hover: hover){.item-container:hover{background-color:var(--checkbox-item-bg-color, #cdcdcd);cursor:pointer}}\";\n\nconst CelMultiCheckbox = class {\n  constructor(hostRef) {\n    Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* r */ \"g\"])(this, hostRef);\n    this.celChange = Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this, \"celMultiCheckboxChange\", 7);\n    this.filteredListLengthEvent = Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this, \"celMultiCheckboxFilteredListLength\", 7);\n    this.filteredList = [];\n    this.filter = '';\n    this.truncateLength = 43;\n    this.itemList = [];\n    this.hideAll = undefined;\n    this.multiCheckboxAriaLabel = 'multi checkbox';\n    this.emptyResultLabel = '';\n    this.maxCheckboxEnabled = undefined;\n    this.showLoader = false;\n    this.enableColumns = false;\n  }\n  connectedCallback() {\n    this.cel_checkbox_item = Object(_utils_dc91c7d7_js__WEBPACK_IMPORTED_MODULE_1__[/* t */ \"j\"])('cel-checkbox-item', 'cel-multi-checkbox', this.el);\n  }\n  handleItemListChange() {\n    this.celChange.emit(this.itemList);\n  }\n  handleFilterChange() {\n    this.filteredList = this.itemList.filter((item) => item.label.toLowerCase().includes(this.filter.toLowerCase()));\n    const checked = this.filteredList.filter(item => item.checked).length;\n    const disabled = this.filteredList.filter(item => item.disabled).length;\n    if (!this.headerCelCheckbox)\n      return;\n    if (checked < this.filteredList.length - disabled) {\n      this.headerCelCheckbox.shadowRoot.querySelector('input').checked = false;\n    }\n    else {\n      this.headerCelCheckbox.shadowRoot.querySelector('input').checked = true;\n    }\n    if (this.filter === '') {\n      this.filteredList = [];\n    }\n    this.filteredListLengthEvent.emit(this.filteredList.length);\n  }\n  componentDidLoad() {\n    const checked = this.scanList(this.itemList);\n    if (!this.headerCelCheckbox)\n      return;\n    switch (checked) {\n      case 0:\n        this.headerCelCheckbox.shadowRoot ? (this.headerCelCheckbox.shadowRoot.querySelector('input').checked = false) : null;\n        break;\n      case this.itemList.length:\n        this.headerCelCheckbox.shadowRoot.querySelector('input').checked = true;\n        break;\n      // DO NOTHING\n    }\n  }\n  handleMultiSelect() {\n    this.deselectAll();\n    if (!this.headerCelCheckbox)\n      return;\n    this.headerCelCheckbox.shadowRoot.querySelector('input').checked = false;\n    if (this.itemList.every(i => i.checked)) {\n      this.itemList.map(i => i.checked = false);\n    }\n  }\n  handleHeaderCheckboxChange(event) {\n    if (event.detail.checkboxType == 'header-checkbox') {\n      this.toggleAll(event);\n    }\n  }\n  handleCelCheckboxChange(event) {\n    //update master item list\n    const updatedList = this.itemList.map((item) => {\n      if (event.detail.identifier === item.identifier) {\n        return { ...item, checked: event.detail.checked };\n      }\n      else {\n        return item;\n      }\n    });\n    //update filtered list if there is one\n    if (this.filter && this.filter !== '') {\n      const updatedFilteredList = this.filteredList.map((item) => {\n        if (event.detail.identifier === item.identifier) {\n          return { ...item, checked: event.detail.checked };\n        }\n        else {\n          return item;\n        }\n      });\n      this.filteredList = updatedFilteredList;\n    }\n    this.itemList = updatedList;\n  }\n  passClick(event) {\n    const target = event.target;\n    if (target.className.includes('item-container')) {\n      const celCheckbox = target.firstChild;\n      celCheckbox.shadowRoot.querySelector('label').click();\n    }\n  }\n  passMouseEnter(event) {\n    const target = event.target;\n    if (target.className.includes('item-container')) {\n      const celCheckbox = target.firstChild;\n      celCheckbox.shadowRoot.querySelector('label').dispatchEvent(new MouseEvent('mouseenter'));\n    }\n  }\n  passMouseLeave(event) {\n    const target = event.target;\n    if (target.className.includes('item-container')) {\n      const celCheckbox = target.firstChild;\n      celCheckbox.shadowRoot.querySelector('label').dispatchEvent(new MouseEvent('mouseleave'));\n    }\n  }\n  scanList(itemList) {\n    let count = 0;\n    for (let i = 0; i < itemList.length; i++) {\n      if (itemList[i].checked) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n  toggleAll(event) {\n    event.detail.checked ? this.selectAll() : this.deselectAll();\n  }\n  selectAll() {\n    const updatedList = this.itemList.map((item) => {\n      if (item.label.toLowerCase().includes(this.filter.toLowerCase()) && !item.disabled) {\n        return { ...item, checked: true };\n      }\n      else {\n        return item;\n      }\n    });\n    this.itemList = updatedList;\n  }\n  deselectAll() {\n    if (this.filter) {\n      const updatedList = this.itemList.map((item) => {\n        if (item.label.toLowerCase().includes(this.filter.toLowerCase()) && !item.disabled) {\n          return { ...item, checked: false };\n        }\n        else {\n          return item;\n        }\n      });\n      this.itemList = updatedList;\n    }\n    else {\n      const allDeselected = this.itemList.map((item) => {\n        if (!item.disabled) {\n          return { ...item, checked: false };\n        }\n        else {\n          return item;\n        }\n      });\n      this.itemList = allDeselected;\n    }\n  }\n  checkSearchResult(itemList, filter) {\n    let isSearchEmpty = true;\n    itemList.forEach((data) => {\n      if (filter && data.label.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())) {\n        isSearchEmpty = false;\n      }\n    });\n    return isSearchEmpty;\n  }\n  getDataLabel() {\n    if (!this.filter || this.filter === '') {\n      return 'Select All';\n    }\n    else\n      return 'Select All Visible';\n  }\n  getSelectAllCheckboxState(itemList) {\n    if (itemList.length === 0)\n      return false;\n    const checkItemList = (this.filter) ? [...this.filteredList] : [...this.itemList];\n    const anyDisabled = checkItemList.some(item => item.disabled);\n    const allChecked = checkItemList.every(item => item.checked);\n    this.syncFilteredState();\n    return allChecked || (anyDisabled && checkItemList.every(item => item.checked || item.disabled));\n  }\n  syncFilteredState() {\n    if (this.filter)\n      this.handleFilterChange();\n  }\n  componentWillLoad() {\n    this.syncFilteredState();\n  }\n  render() {\n    const noDataFound = this.checkSearchResult(this.itemList, this.filter);\n    return (Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"e\"])(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* H */ \"a\"], { \"data-cel-version\": '9.0.6' }, Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"e\"])(\"div\", { class: ['multi-container', this.enableColumns ? 'multi-columns-container' : ''].join(' '), role: \"group\", \"aria-label\": this.multiCheckboxAriaLabel }, !this.hideAll ? (Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"e\"])(\"div\", { class: ['header-container item-container border-bottom', this.getSelectAllCheckboxState(this.itemList) ? 'checked' : ''].join(' '), onMouseOver: (ev) => this.passMouseEnter(ev), onMouseLeave: (ev) => this.passMouseLeave(ev), onClick: (ev) => this.passClick(ev) }, Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"e\"])(this.cel_checkbox_item, { \"data-identifier\": 'cci-header-checkbox', ref: (el) => (this.headerCelCheckbox = el), \"data-checkbox-type\": _constants_34e654b0_js__WEBPACK_IMPORTED_MODULE_2__[/* H */ \"f\"], \"data-checked\": this.getSelectAllCheckboxState(this.itemList), class: 'header-checkbox', \"data-label\": this.getDataLabel(), \"data-truncate-length\": this.truncateLength, \"data-disabled\": this.showLoader }))) : null, this.showLoader ?\n      null\n      : Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"e\"])(\"ul\", { class: ['item-list-container', this.enableColumns ? 'columns-container' : ''].join(' ') }, this.itemList.map((item, i, row) => {\n        if (this.filter && noDataFound && i + 1 === row.length) {\n          return Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"e\"])(\"li\", null, this.emptyResultLabel);\n        }\n        if (this.filter && !item.label.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())) {\n          return;\n        }\n        {\n          return (Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"e\"])(\"li\", { class: ['item-container', item.checked ? 'checked' : ''].join(' '), onClick: (ev) => this.passClick(ev), onMouseOver: (ev) => this.passMouseEnter(ev), onMouseLeave: (ev) => this.passMouseLeave(ev) }, Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"e\"])(this.cel_checkbox_item, { class: 'checkbox-item', \"data-identifier\": item.identifier, \"data-label\": item.label, \"data-checked\": item.checked, \"data-disabled\": item.disabled, \"data-truncate-length\": this.truncateLength, \"data-subtext\": item.subtext })));\n        }\n      })))));\n  }\n  get el() { return Object(_index_9a8c46b4_js__WEBPACK_IMPORTED_MODULE_0__[/* g */ \"d\"])(this); }\n  static get watchers() { return {\n    \"itemList\": [\"handleItemListChange\"],\n    \"filter\": [\"handleFilterChange\"]\n  }; }\n};\nCelMultiCheckbox.style = celMultiCheckboxCss;\n\n\n\n\n/***/ })\n\n}]);","inputSourceMap":null}